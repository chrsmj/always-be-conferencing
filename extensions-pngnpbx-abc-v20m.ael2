/*
 ****************************************************************
 *                                                              *
 *              Always Be Conferencing (ABC)                    *
 *                                                              *
 *  Authors: chris @ Penguin PBX Solutions (PenguinPBX.com)     *
 *  Version: 20m "MAGA and MAF Edition"                         *
 *  Release: 6 January 2023                                     *
 *  License: Creative Commons Zero v1.0 Universal (CC0 1.0)     *
 *                                                              *
 *  To the extent possible under law, the author(s) have        *
 *  dedicated all copyright and related and neighboring rights  *
 *  to this software to the public domain worldwide. This       *
 *  software is distributed without any warranty.               *
 *                                                              *
 *  You should have received a copy of the CC0 Public Domain    *
 *  Dedication along with this software. If not, then please    *
 *  see: <http://creativecommons.org/publicdomain/zero/1.0/>.   *
 *                                                              *
 ****************************************************************


Howdy
=====

ABC starts your Conference Bridge(s) in ASTERISK(R) by sending calls to up
to forty-two other participants, making it easier for both you and your Friends
to stay connected using audio and (starting in version 16i) even some video.

ABC requires ASTERISK to already be installed and working. ABC is tested most
with ASTERISK version 20, but starting in ABC version 16l you can get most of
it working okay with ASTERISK version 13 as well. ABC can be integrated into
existing FreePBX(R) setups -- see mini-HOWTO & Examples below.

ABC is almost entirely contained in the single file you are reading right now.
This file is written in ASTERISK Extension Language dial plan format. Ideally,
you will only need to include this file as new dial plan configuration, then
jump to it from your existing "extensions.conf" or "extensions_custom.conf"
files. See Examples 1-15 below for some integration ideas. Other config files
to look at include "confbridge.conf", "indications.conf" and "voicemail.conf".
Also you can create an "abc.conf" file in the same directory for more control.
Generally you will only need minimal modifications to get working with ABC.

There are many use cases considered by ABC, improving with each release.
Early versions (15) made for fast conf calls; version 16c added emergency call
nice-things-to-have; single codec video was added in 16i; followed by Work From
Home/Phone scenarios in version 16k; then separate Yurt Corners, backwards
compatibility with ASTERISK version 13, and Parallel non-conference notifying
mode via voicemail (a popular user request!) were all added in version 16l.
In 20m, the parallel idea was extended to also use the Page() application
(the Page() app internally implements a limited type of conference call.)

ABC IS YOUR FREE GIFT, AS-IS, WITH NO WARRANTY!!!



ABC Use Case: Emergency Outbound Calls (EOC)
--------------------------------------------

ABC can be configured to very quickly notify others of your call attempts,
using several different methods, which can be mixed together as you wish:

 * Conference Calls
 * Phone Calls
 * Emails
 * Voicemails
 * Texts
 * Overhead Pages
 * Strobe Lights
 * External Processes
 * Cloud APIs
 * and more!

For SIP Call-type notifications, the caller ID info notify-ees see on phones
can show them your name; your phone number; your X/Y/Z co-ordinates including
GPS, Plus Codes, elevation, depth, room, floor, and/or building number; and the
Remote End destination phone number you originally dialed eg. 112, 911, 999,
etc.

Of course, as this is Always Be Conferencing, the Conference Calls notification
method is perhaps the most interesting to consider...

When your Friends answer their phones, they will hear some short notes (A-B-C),
and (optionally) a Text-To-Speech (TTS) play back of your GPS co-ordinates, and
then be connected to talk with you and other Friends in your "Yurt" conference
room.

In Simple & Tin Can Modes, Friends will even be able to talk with you *before
Remote End answers* -- very helpful if the Remote End *never answers* due to
technical/capacity failures ouside of your network! (What if the far away ops
are all busy? ABC can let you talk to local safety and security teams, instead
of waiting on hold!)

Also in Simple Mode, the conference will continue until all parties disconnect
-- even if the OriGinal caller (you the O.G.) hang up the phone / drop the call
before anybody else "really" answers and starts talking!

But wait, there's more! And more than one Conference Call room available...

Instead of Friends, or in addition to them, if you use Paladins, they will be
placed into a separate conference -- the "Palace" -- all by themselves. They
won't be able to talk with you -- like your Friends in the "Yurt" conference
-- but Paladins will be able to hear you and Remote End talking, and Paladins
can talk to each other to help co-ordinate the local response to your call.
Sometimes Paladins don't listen to the Yurt, instead, they enter the Palace
and talk amongst themselves -- but that is still triggered by you the O.G.
making a phone call (and fully configurable from within ABC dial plan API.)

Related, Trolls are in the Yurt with you the OG caller, the Remote End, and
any Friends; but Trolls can only listen and not speak to anyone. Also Trolls
only get two DTMF menu options (to change their listening volume up or down.)
Sometimes Trolls are not people but blinking lights or overhead speakers that
play pre-recorded/dynamic-text-to-speech back alert messages -- up to you.

For those not wishing to do much conferencing, but get voicemail/email/page
notifications when somebody makes an emergency call, and do so with minimal
impact to their existing dial plan, then check out Parallel Mode, as described
in Examples #13, #14, and #15.



ABC Use Case: Work From Home (WFH)
              AKA Insta Teams Mode (ITM)
----------------------------------------

ABC can be configured in Insta Teams Mode, to help you reach out to your Team
without them having to remember all the conference call details themselves,
making it easier for you to start-up Yurts with your Friends.

With WFH/ITM, you text: "I'll give y'all a call tomorrow morning between 10
and 11." Then tomorrow you call your ABC phone number, authorize the call (PIN)
to start spooling out to your Team, and then join in talking with everyone who
accepts the invitation to your Yurt. Or, check-in more on important projects,
from the road, using just your phone, when the chat/email threads get too long.

There are several differences in this Use Case...

In contrast with emergency calls, in Teams Mode your Friends will *NOT* be
placed into the Yurt right away -- they will hear a short message from you and
then a message asking them to join via "press 1" keypad option. This helps
prevent your Yurt from getting stuck in somebody's cell phone voicemail system.

Also, there are no Paladins or Trolls in this mode. And Friends in Teams Mode
won't hear your GPS co-ordinates (like they do in emergency modes). In-call
menu options are a little different, too.

You might think of the Work From Home / Insta Teams Mode solution as a sort of
mini-town hall teleconference, complete with features like *9 for raising your
hand.



abc.conf
========

This optional file can go into your /etc/asterisk/ directory:

[general]                   ; Always Be Conferencing by Penguin PBX Solutions.
                            ;
demomode=nope               ; Demo mode uses extension numbers 7001-7008.
                            ; There are also some named (not numbered) extensions
                            ; that you might want to try eg. ABCtheOG.
                            ;
[eoc]                       ; Emergency Outbound Calling
                            ;
paravm=ABCfriend1           ; Who gets notified of EOC calls (in Parallel mode.)
paravm=ABCfriend2           ; May be specified up to 10 times.
paravm=ABCtroll1            ; Be sure to include @context if not using 'default'.
paravm=ABCtroll2            ; These entries must exist in voicemail.conf file.
                            ; Consider making new voicemail users in a new
                            ; voicemail context just for EOC -- then you can
                            ; specify a better 'emailsubject' and 'emailbody'
                            ; to clearly represent that these are emergencies.
                            ;
parapg=PJSIP/123            ; Instead of notifying with VoiceMail, send a Page.
parapg=PJSIP/456            ; Each of these phones will hear call meta data,
parapg=PJSIP/789            ; not the actual audio stream.
                            ;
                            ;
[itm]                       ; Insta Teams Mode (WFH scenarios)
                            ;
conferenceminutes=120       ; Maximum length for one conference.
monthlyminutes=600          ; Allowed cumulative conference minutes for the month.
vmcontext=default           ; Voicemail context used to authenticate users.
numberstyle=us              ; Default is 'international' for robo number speech.



TESTING
=======

ABC was tested most with PJSIP on ASTERISK certified version 16.8-cert3.
It should also work okay with other channel techs -- see DAHDI in Example #2.
And chan_sip should mostly work (see PJSIP_DIAL_CONTACTS and PJSIP_HEADERS for
exceptions.) ASTERISK version 13 also mostly works (except for Yurt Corners
in Work From Home Mode) but it uses some call files in /tmp and the System()
application to shuffle files around for asynchronous call spooling.

Extension 922 is used often in the ABC Examples -- see below -- although any
extension number (0-9a-zA-Z) should work. But you should test it yourself.

Really, you should test and verify everything in ABC that you intend to use!
If you are not comfortable with that, or even if you are, please consider talks
with your neighborhood free/libre/open source software folks for separate
support/warranty consulting services.

AGAIN: ABC IS YOUR FREE GIFT, AS-IS, WITH NO WARRANTY!!!



FEATURES
========

~ Multiple notifications at start of call - by vmail, email and/or phone calls.
~ Dynamic call back numbers - helps users on phones that lack dedicated DIDs.
~ Caller ID based on Subnet ID - easier remote office, VPN and VLAN support.
~ Update desk phone GPS with included visual-IVR - includes text menu on screen.
~ Encrypted local storage of GPS info - protects address info when data at rest.
~ Dynamic Location Routing per RFC 6442 - full discussion included in this file.
~ Text-To-Speech of GPS and additional information - good ideas for emergencies.
~ Record each leg of the call in separate WAV files - consider all legal issues.
~ Automatically bridge in callees - "Simple Mode".
~ Wait for answer before bridging - "Tin Can Mode".
~ Prompt for key to confirm answer - "Insta Teams Mode".
~ Skip the conferencing and just notify - "Parallel Mode with Voicemail Notify".
~ Easy integration with ASTERISK and FreePBX installs - see mini-HOWTO below!



KNOWN BUGS
==========

~ Callers from the same extension number dialing the same destination
number will end up in the same call path. This could happen when users
dial 922 from their laptop soft phone at the same time as dialing 922
from their desktop phone. The recommended workaround is to use separate
extension numbers for each device registration.
~ DTMF pass through is not activated (except in Parallel Mode). Bug/Feature!



TODO LIST - EOC scenarios
=========================

~ Support telecommunications relay services via MESSAGE functions.
~ Pidgin example using SIMPLE driver to see pop-up notifications on PCs.
~ SMS support for Text-to-Remote end.
~ Friends option to start out muted - on a friend by friend basis,
  then press 1 to un-mute at any time.
~ Multicast addresses for paging.
~ Add option 8 for "U"sers - to list out the roll of users in the conf.
~ Finish CLIPS codes for appending to Emergency Caller ID number and/or
  dialed number - either way it is for parsing by the telco, to map the codes
  they assign for each of your specific physical locations.
~ Add waiting rooms for Yurts to be called into by end users.
  The admin should get a "knock-knock-knock" sound that somebody wants to join.
  Admin gets 60 seconds to listen to the name and/or number and accept.
~ Always playback any Z-coordinates, in addition to X and Y.
~ Reminder function to check if user did not recently update their
  GPS, to be placed just before a "Dial" by the user.
~ Most overhead paging does not actually use the Page() application in ASTERISK.
~ Disconnect Remote End when OG and Friends have left Yurt (using marked users.)
~ Extend Parallel Mode beyond just Voicemail Notifications.
~ Nosy Paladin audio feed from Yurt into Palace sounds terrible! Broadcast()?



TODO LIST - WFH scenarios
=========================

~ Support chat box via MESSAGE functions. Send SMS to users so they
  can enter from their phones (eg. audio from call on bluetooth, but
  full chat window on your smart phone.)
~ More notifications when recording starts/stops.
  Such as when during the chat, admin starts recording,
  play message to all on the call.
~ Automatically mute all new entrants after Yurt size exceeds X users.
~ Friendly instructions at the start for callee. "This is a YurtTel call.
  Press *6 to unMute yourself." either before or after the temp greeting.
~ Single entry sound, when room is full and/or 60 seconds. "There are
  X people in the room, press *8 to redial the Y people still not here."
~ LEAVE SOUNDS! Option ??
~ Playback "everyone else has left the call" if you are only one remaining.
~ Allowing adding new phone numbers on-the-fly mid-conference.



TODO LIST - generally
=====================

~ Line up Test numbers with Example numbers.
~ Update to use Broadcast() application introduced in ASTERISK 18. Big job!



Quick Start mini-HOWTO demo for first time ABC users on FreePBX
===============================================================
Only 95 lines! But up and running in 5 minutes!

This demo assumes all phones are using same channel technology.
This could be all chan_PJSIP, or all chan_SIP, or all chan_DAHDI,
or all chan_IAX, or others - depending on your configuration.

For new installs, chan_PJSIP is recommended.

1. First, SSH into your PBX, and then run the following commands:

#BEGIN_MINI_COMMANDS#

    # MaKe DIRectory
    mkdir ~/abc

    # Change Directory
    cd ~/abc

    # download this file into the new "abc" directory
    # TODO: nobody user in /tmp
    wget https://raw.githubusercontent.com/chrsmj/always-be-conferencing/master/extensions-pngnpbx-abc-v20m.ael2

    # ECHO line into dial plan - AEL format used by ABC
    echo '#include "extensions-pngnpbx-abc-v20m.ael2"' > extensions.ael

    # ECHO line into dial plan - CONF format used by FreePBX
    echo '[from-internal-custom]' > extensions_custom.conf

    # add some glued lines to the CONF dial plan file
    echo 'exten => _123*222,1,Goto(pngnpbx-abc-demo,${EXTEN},1)' >> extensions_custom.conf
    echo 'exten => _123*222*,1,Goto(pngnpbx-abc-demo,${EXTEN},1)' >> extensions_custom.conf
    echo 'exten => _123*222*.,1,Goto(pngnpbx-abc-demo,${EXTEN},1)' >> extensions_custom.conf
    echo 'exten => _123*222X*.,1,Goto(pngnpbx-abc-demo,${EXTEN},1)' >> extensions_custom.conf

    # Show DIFFerences with current FreePBX custom extensions.
    diff -u extensions_custom.conf /etc/asterisk/extensions_custom.conf

    # Check for any AEL dial plan, using same command.
    diff -u extensions.ael /etc/asterisk/extensions.ael

    # LiSt existing files, with four options.
    ls -last /etc/asterisk/extensions_custom.conf
    ls -last /etc/asterisk/extensions.ael

#END_MINI_COMMANDS#

2. If there's no existing files or no major differences, then copying
   should be fairly straight forward, with help from "sudo" command:

#BEGIN_MINI_SUDO_COMMANDS#

    # CoPy with "-i" option to prompt before overwrite.
    sudo cp -i ~/abc/extensions* /etc/asterisk/

    # Non-sudo check of file details.
    ls -last /etc/asterisk/extensions_custom.conf
    ls -last /etc/asterisk/extensions.ael

#END_MINI_SUDO_COMMANDS#


   If there are any errors on the copying, then you should manually inspect
   the files for conflicts. Most likely, the only conflict will be with the
   extensions_custom.conf files. Check those carefully before any mergers.

   If extensions_custom.conf already exists, then you will need to insert the
   ABC "_123*222..." config lines into the existing [from-internal-custom]
   context (or create the context if it does not already exist.)

3. After completing the file copying, exit SSH and open up your PBX GUI.
   Issue a full PBX reload using your GUI (sometimes you have to make a small
   change to get the "Apply Config" button to appear, so make a trivial thing
   like adding ABC after your name, then "Submit", then "Apply Config".)

4. The "Apply Config" process may take a minute.

5. Finally, start making test calls from your desk phone, with big dial lines:
   
    123*2223*1000*2000*3000

   ...replacing 1000 with an extension acting as your "Remote End" operator
   and replacing 2000 and 3000 with your own local "friend" extensions.
   (You can shorten these in the future - remember this is the demo :)

   To hear your GPS co-ordinates, any participant can press * at any time
   during the call. To stop the bot playback, any participant can press #.
   See additional conference bridge menu options below - there are also
   different options available, based on the nature of the call.

   To silence the ring-back you hear from friend's phones, but not the
   Remote End, you can run the following command on the ASTERISK CLI: 

    sirius*CLI> indication add us silent 0/15000


Thus ends the mini-HOWTO. HTH!



PREREQUISITE: The ASTERISK Extension Language (AEL)
===================================================

This is not your standard dial plan "/etc/asterisk/extensions.conf" file!

ABC is configured in the ASTERISK Extension Language (AEL). AEL syntax is
converted into standard CONF file format when loaded in to system memory
by ASTERISK. But you should not need to edit this ABC AEL file very often,
if ever. It only needs to be *included* into your dialplan.

Please copy this file into your "/etc/asterisk/" directory and set it to
read-only permission for the user/group your ASTERISK process runs as (usually
"root" or "asterisk".)

To confirm you have AEL working in your install of ASTERISK, you can run this
command on the ASTERISK CLI:

    sirius*CLI> core show help ael

...which, if loaded properly, should list "ael reload" and "ael set debug".

Otherwise, if this is your first time using AEL, then you may need to manually
load the module, or take other steps. This may include rebuilding from source
code eg. selecting the AEL module when using "make menuconfig".

After confirming AEL is active and working, edit (or create) this file:

    /etc/asterisk/extensions.ael

And add this line (with no spaces at the front):

    #include "extensions-pngnpbx-abc-v20m.ael2"

...then save the file. Now you should be able to load the AEL config and view
the in-memory dial plan in CONF format:

    sirius*CLI> ael reload
    sirius*CLI> dialplan show pngnpbx-abc-dial

If that works, and you see a bunch of dial plan looking output, Congratulations!
You are now able to use ABC from standard dial plan in "extensions.conf" file
-- or in the "extensions_custom.conf" file if you are using FreePBX.



Simple Mode vs. Tin Can Mode vs. Insta Teams Mode vs. Parallel Notification Mode
================================================================================

If you choose Tin Can mode, then ABC will use Dial() instead of Originate() at
start of the call to the Remote End. This is to help satisfy requirements in
some situations where it is deemed desirable to only route the call and not
answer the caller via early bridging. (Particularly this is for emergency
calling situations.)

Please note the following major differences between Modes:

0. In Simple Mode, everyone can always talk to each other.
   In Tin Can Mode, *on some phones*, Caller can talk to Friends before
   Remote End answers (but it depends on the Friends' type of phone.)
   In Teams Mode, Friends do not enter the Yurt until they press 1 to opt-in.
   In Parallel Mode, there is no conferencing ;( only notifications.

1. In Simple Mode, everyone always gets access to DTMF menu options, because
   they are always in the Yurt.

2. In Teams Mode, Friends must press 1 to join, then it is basically just
   like Simple Mode.

3. In Tin Can Mode, Friends will not get access to DTMF menu options until the
   Remote End answers. Then, everyone will get access, same as Simple Mode.

4. In Tin Can Mode, there may be a few more frames of feedback immediately
   after the Remote End answers.

5. In Tin Can Mode ONLY, when caller hangs up before Remote End answers, then
   the call will drop. (MAYBE TODO: Fix this in a future release.)



PRIVACY
=======

The handling of exact GPS co-ordinates of each phone presents multiple safety,
security, and privacy concerns. (See RFCs 3693, 6280, 6442 and 6772.)

ABC considers carefully each of the six basic Geopriv roles introduced in
RFC 3693 and later refined in RFC 6280 Section 3.2, to wit:

1. Target: ABC can be the Target, or Targets can be User-based or Device-based.
2. Device: ABC can be the Device, but more commonly it will be your SIP phone.
3. Rule Maker: ABC provides RM functions. (See Conference Bridge DTMF options.)
4. Location Generator: ABC can be the LG. (See DIY GPS IVR for users/admins.)
5. Location Server: ABC can perform LS. (See encrypted internal AstDB storage.) 
6. Location Recipient: ABC considers almost all participants as potential LRs.
   ABC tries to get the DL to the LRs by multiple automatic and manual methods.

With ABC as your LS, your personal location data is not *pre-registered* with
any 3rd-party remote/hosted/cloud/government/etc. services in large centralized
databases, with all of the associated privacy and data safety issues that can
entail. But new regulations, such as those covering finer detail refinements in
Dispatchable Location (DL) info, threaten to dramatically increase the size and
scope of these centralized LS databases, opening up previously unknown employee
where-abouts to 'manual ALI query' and other privacy attacks in the future.

In the author's opinion, too many SIP providers are complying with changing
regulatory requirements by (un)intentionally sacrificing liberty in exchange
for safety, acting as the LS when that is wholly un-necessary. While not
exactly *security theater*, the choice between exposing personal information
outside of your PBX/MLTS only at the time of an emergency vs. storing it all
of the time with the telephone company is not to be taken lightly if you value
the privacy of your users. (Do you even SSH or VPN bro ?)

ABC takes a more dynamic approach (Dynamic Location Routing) instead of the
old Registered Address system. ABC only releases your location details
from the local PBX system when it is needed. Until then, ABC can store your data
at rest in encrypted format on the local ASTERISK system's internal SQLite
database (AstDB) using a separate key file. This prevents bulk dumping of clear
text data via ASTERISK CLI commands like "database show".

By default, the key is located on the filesystem in the /var/lib/asterisk/keys/
directory. When you automate backup processes, then you may want to consider
changing these slightly, for example, to not include the AstDB in directory
/var/lib/asterisk/ with /var/lib/asterisk/keys/ directory in the same tarball.
(That would be like hiding the key under the door mat.)

Or, you might consider changing the location of the default key file used for
GPS data encryption (TODO: make this easier in a future ABC revision.)

However, should you lose the key file, then users will need to manually
re-update their GPS XYZ co-ordinates, using the included IVR as the LG. Until
they do, the PBX will not know where they are, and it will fail when trying to
do things like send those co-ordinates to the Remote End LR.

Steps to (re)create the key file:

    sudo mkdir /var/lib/asterisk/keys
    sudo touch /var/lib/asterisk/keys/pngnpbx-abc-key.txt
    sudo chown asterisk.asterisk /var/lib/asterisk/keys/pngnpbx-abc-key.txt

Feel free to store 16 random alpha-numeric characters in that file,
otherwise, a somewhat random string will be used.

Of course, you are free to forego the novel location features, and stick with
the Registered Address system offered by your telephone company. ABC is still
totally compatible with those types of legacy solutions.



LOGGING
=======

Call Detail Records will be saved in files based on whatever ABC account name
you specify ie. the account code will be set to this name on (almost) all
channels. In the examples (below) it would be "abctest.csv" in the same
directory as your "Master.csv" (assuming you are using CSV for CDRs.)

Optionally you can record the call (see example #2 below).
Look for the recordings in "/var/spool/asterisk/monitor/" directory.
The ABC account name will be used to prefix the files (one file per leg.)
CAREFUL when recording eg. legal issues, drive space, privacy, etc.



EXAMPLES
========

YOU MUST CHANGE #YOUR-TRUNK-s#, the "ABCTO" number, the extension numbers, and
choose valid Call-Back numbers, whenever copy-pasta'ing these examples !!!

But please feel free to copy the next 411 lines directly into your dial plan,
appended somehow to your extensions.conf or extensions_custom.conf files.

;
; Example #1: Simple Mode
; -----------------------
; * PJSIP channel driver.
; * One Remote End.
; * One friend to bridge in.
; * One static call back number.
; * Remapping of 922 -> 933 for testing SIP provider address verification.

[from-internal-custom-abc-example-1]

exten => 922,1,Set(ex1stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)  ; Ready ?
exten => 922,n,NoOp(placeholder)                                    ; TBD
exten => 922,n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com) ; Please copy and change as you wish!
exten => 922,n,Set(ABCTO=933)                                       ; CHANGE ME! Remapping of the dial to another number (if any.)
exten => 922,n,Set(path=PJSIP/${ABCTO}@#YOUR-TRUNK#)                ; CHANGE ME! Endpoint section defined in your PJSIP configuration.
exten => 922,n,Set(callback=3035557729)                             ; CHANGE ME! Your call-back telephone number (probably 10 digits in the USA.)
exten => 922,n,Set(friend=PJSIP/1113)                               ; CHANGE ME! The local PJSIP endpoint to bridge into the call.
exten => 922,n,Set(abcshrtname=abctest)                             ; CHANGE ME! Use abctest as the conf account name.
exten => 922,n,Set(ringtime=120)                                    ; MAYBE CHANGE ME! Rings Remote End / path for 2 minutes.
exten => 922,n,AELSub(pngnpbx-abc-simple,${abcshrtname})            ; Simple setup.
exten => 922,n,AELSub(pngnpbx-abc-path,1,${ringtime},${path})       ; Set the first (and only) call path to use on call to Remote End.
exten => 922,n,AELSub(pngnpbx-abc-remote,${callback},static)        ; Originate out the path/trunk using your call-back number as the Caller ID number.
exten => 922,n,AELSub(pngnpbx-abc-friend,1,${friend})               ; Bridge in the other attendee automatically.
exten => 922,n,AELSub(pngnpbx-abc-howdy-yall)                       ; Enter the conference. No more dial plan processing occurs for caller in your CONF file.

;
; Example #2: Using members of Super Awesome Company
; --------------------------------------------------
; * Adds multiple remote paths.
; * Adds call recording.
; * Adds geolocation.
; * Adds additional friend phones.
; * Adds all 15 extension numbers 1101-1115 from basic-pbx sample
;   pjsip.conf file as found in ASTERISK certified version 16.3-cert1
;   from Dec 2019.
; * Assumes users are all inside of magical imaginary phone booths.
; * Slightly different formatting of exten lines, with 'same' but without '>'.
;   (Does the same thing :)

[from-internal-custom-abc-example-2]

exten = 922,1,Set(ex2stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)           ; Ready ?
 same = n,NoOp(placeholder)                                                 ; TBD
 same = n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)              ; Please copy and change as you wish!
 same = n,Set(ABCTO=933)                                                    ; CHANGE ME! Remapping of the dial to another number (if any.)
 same = n,Set(gpsurl=https://abc.penguinpbx.com/loc/)                       ; CHANGE ME! URL that will be included in Geolocation SIP header.
 same = n,Set(path1=DAHDI/#YOUR-TRUNK-1#/${ABCTO})                          ; CHANGE ME! Endpoint section defined in your DAHDI(R) configuration.
 same = n,Set(path2=PJSIP/${ABCTO}@#YOUR-TRUNK-2#)                          ; CHANGE ME! A PJSIP endpoint section - used if first path is down/unreachable.
 same = n,Set(path3=PJSIP/${ABCTO}@#YOUR-TRUNK-3#)                          ; CHANGE ME! Yet another endpoint section defined in your PJSIP configuration.
 same = n,AELSub(pngnpbx-abc-init,abctest,record,3600,,announce,,,)         ; Use abctest as the conf account name, save WAVs, limit to 1 hour, and announce GPS.
 same = n,AELSub(pngnpbx-abc-path,1,10,${path1})                            ; Set the first call path / trunk name to use on call to Remote End. Ring 10 seconds.
 same = n,AELSub(pngnpbx-abc-path,2,60,${path2})                            ; Set the second call path - used only on failover of first call path. Ring 1 minute.
 same = n,AELSub(pngnpbx-abc-path,3,300,${path3})                           ; Set the third call path - used only on failover of second call path. Ring 5 minutes.
 same = n,NoOp(About to change flow based on caller ID number.)
 same = n,Set(cleancid=${FILTER(0-9a-zA-Z,${CALLERID(num)})})
 same = n,Set(gotdp=${DIALPLAN_EXISTS(${CONTEXT},${EXTEN},x${cleancid})})   
 same = n,GotoIf($[${gotdp}]?x${cleancid})

; C-Level - corner of Park
; These two phones are in the same 1m square open area.
 same = n(x1107),NoOp()
 same = n(x1111),NoOp()
 same = n,AELSub(pngnpbx-abc-gps,,39.73981,-104.99006,5280,feet,${gpsurl})  ; Set Geolocation SIP header to URL and GPS co-ordinates #1.
 same = n,AELSub(pngnpbx-abc-sa,144 W Colfax Ave,Denver,CO,80202)           ; Street Address, city name, state abbreviation, zip code
 same = n,AELSub(pngnpbx-abc-ai,NW corner of Park)                          ; Additional Information.
 same = n,AELSub(pngnpbx-abc-remote,3035557729,static)                      ; Originate out the trunk(s).
 same = n,Goto(muhfriends)

; Customer Experience - in Park but near Memorial
; These four other phones are in another nearby open area.
; With Different Additional Information.
 same = n(x1101),NoOp()
 same = n(x1102),NoOp()
 same = n(x1115),NoOp()
 same = n,AELSub(pngnpbx-abc-gps,,39.74007,-104.98912,5280,feet,${gpsurl})
 same = n,AELSub(pngnpbx-abc-sa,144 W Colfax Ave,Denver,CO,80202)
 same = n,AELSub(pngnpbx-abc-ai,SW of Voorhies Memorial)                                     
 same = n,AELSub(pngnpbx-abc-remote,3035557729,static)
 same = n,Goto(muhfriends)

; Park Benches for Software Engineers
; Note this uses Plus Codes not "standard" latitude and longitude
 same = n(x1110),NoOp()                                                     
 same = n(x1104),NoOp()
 same = n(x1113),NoOp()
 same = n(x1114),NoOp()
 same = n,AELSub(pngnpbx-abc-gps,85FQP2Q6+H7,,,5280,feet,${gpsurl})
 same = n,AELSub(pngnpbx-abc-sa,Unnamed Road,Denver,CO,80202)
 same = n,AELSub(pngnpbx-abc-ai,SW corner of Park)                                     
 same = n,AELSub(pngnpbx-abc-remote,3035557729,static)
 same = n,Goto(muhfriends)

; Directors and all others sit together in the Ampitheater
; Again using Plus Codes - see https://plus.codes/ for more info
 same = n(x1103),NoOp()
 same = n(x1106),NoOp()
 same = n(x1108),NoOp()
 same = n,AELSub(pngnpbx-abc-gps,85FQP2Q6+7F,,,5280,feet,${gpsurl})
 same = n,AELSub(pngnpbx-abc-sa,101 W 14th Ave,Denver,CO,80202)
 same = n,AELSub(pngnpbx-abc-ai,Greek Ampitheater)                                     
 same = n,AELSub(pngnpbx-abc-remote,3035557729,static)
 same = n,Goto(muhfriends)

; Remote office location in the Mountains for Sales
 same = n(x1105),NoOp()
 same = n(x1109),NoOp()
 same = n(x1112),NoOp()
 same = n,AELSub(pngnpbx-abc-gps,,39.588,-105.644,4350,meters,${gpsurl})    ; Set Geolocation SIP header to URL and GPS co-ordinates #2.
 same = n,AELSub(pngnpbx-abc-sa,Mount Evans Ridge,Idaho Springs,CO,80452)   ; Street Address, city name, state abbreviation, zip Code
 same = n,AELSub(pngnpbx-abc-ai,Floor 42)                                   ; Additional Information.
 same = n,AELSub(pngnpbx-abc-remote,7205557729,static)                      ; Originate out the trunk(s) using a different call-back number as the Caller ID number.
 same = n,Goto(muhfriends)

 same = n(muhfriends),NoOp()
 same = n,Log(VERBOSE,Remote dial started. Now adding friends to call.)     ; Most critical is the remote call.
 same = n,AELSub(pngnpbx-abc-friend,1,PJSIP/1113)                           ; Bridge in friend.
 same = n,AELSub(pngnpbx-abc-friend,2,PJSIP/1111)                           ; Bridge in another friend.
 same = n,AELSub(pngnpbx-abc-friend,3,PJSIP/1109)                           ; Bridge in yet another friend. (Up to 42 total participants by default.)
 same = n,AELSub(pngnpbx-abc-howdy-yall)                                    ; Enter the conference. No more dial plan processing occurs for caller.

;
; Example #3: Dynamic call back numbers for phones without DIDs
; -------------------------------------------------------------
; * Needs two contexts.
; * Adds nine Dynamic Call Back numbers.
; * Adds local call back option with 922*EXTENSION
; * Requires call backs be registered before first use
;   by dialing 123*2220*NUMBER

[from-external-custom-abc-example-3]

exten = 3035551111,1,AELSub(pngnpbx-abc-reentry,1,${EXTEN},${abclo})    ; Place the dynamic call back DIDs here, one per line (copy/paste/edit.)
exten = 3035552222,1,AELSub(pngnpbx-abc-reentry,2,${EXTEN},${abclo})    ; Do not change anything except for the phone numbers and position number.
exten = 3035553333,1,AELSub(pngnpbx-abc-reentry,3,${EXTEN},${abclo})    ; You should not provision these DIDs anywhere else in your PBX.
exten = 3035554444,1,AELSub(pngnpbx-abc-reentry,4,${EXTEN},${abclo})    ; This is particularly useful for lobby/waiting area phones without call back numbers.
exten = 3035555555,1,AELSub(pngnpbx-abc-reentry,5,${EXTEN},${abclo})    ; The abclo variable is for loading new call backs into internal AstDB.
exten = 3035556666,1,AELSub(pngnpbx-abc-reentry,6,${EXTEN},${abclo})
exten = 3035557777,1,AELSub(pngnpbx-abc-reentry,7,${EXTEN},${abclo})
exten = 3035558888,1,AELSub(pngnpbx-abc-reentry,8,${EXTEN},${abclo})
exten = 3035559999,1,AELSub(pngnpbx-abc-reentry,9,${EXTEN},${abclo})

[from-internal-custom-abc-example-3]

exten = 922,1,Set(ex3stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
 same = n,NoOp(placeholder)
 same = n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)  ; Please copy and change as you wish!
 same = n,Set(ABCTO=933)                                        ; CHANGE ME! Remapping of the dial to another number (if any.)
 same = n,Set(path=PJSIP/${ABCTO}@#YOUR-TRUNK#)                 ; CHANGE ME! Endpoint section defined in your PJSIP configuration.
 same = n,Set(defaultcallback=3035550000)                       ; CHANGE ME! Default call back number used if dynamic allocation fails.
 same = n,Set(friend=PJSIP/1113)                                ; CHANGE ME! The local PJSIP endpoint to bridge into the call.
 same = n,Set(abcshrtname=abctest)                              ; CHANGE ME! Use abctest as the conf account name.
 same = n,Set(ringtime=120)                                     ; MAYBE CHANGE ME! Rings Remote End / path for 2 minutes.
 same = n,AELSub(pngnpbx-abc-simple,${abcshrtname})             ; Simple setup.
 same = n,AELSub(pngnpbx-abc-path,1,${ringtime},${path})        ; Set the first (and only) call path to use on call to Remote End.
 same = n,AELSub(pngnpbx-abc-remote,${defaultcallback},dynamic) ; Originate out the path/trunk using a dynamic call-back number as the Caller ID number.
 same = n,AELSub(pngnpbx-abc-friend,1,${friend})                ; Bridge in the other attendee automatically.
 same = n,AELSub(pngnpbx-abc-howdy-yall)                        ; Enter the conference. No more dial plan processing occurs for caller.

exten = _922*XXXX,1,NoOp(get back to conf locally)              ; Useful if a friend falls off the wagon. They can get back on the bridge themselves.
exten = _922*XXXX/1113,n,NoOp()                                 ; Check if they are your friend. Based on caller ID number.
exten = _922*XXXX/1107,s,NoOp()                                 ; Didn't try to automatically bridge this friend but let them join later manually.
exten = _922*XXXX/1111,s,NoOp()                                 ; Didn't try to automatically bridge this friend but let them join later manually.
exten = _922*XXXX/1103,s,NoOp()                                 ; Didn't try to automatically bridge this friend but let them join later manually.
exten = _922*XXXX/1106,s,NoOp()                                 ; Didn't try to automatically bridge this friend but let them join later manually.
exten = _922*XXXX,s,Hangup()                                    ; No non-friends allowed.
exten = _922*XXXX,n,NoOp()
 same = n,Set(abcconfid=${FILTER(0-9a-zA-Z,${EXTEN:4})})
 same = n,Goto(pngnpbx-abc-bridge,${abcconfid},1)

exten = _123*2220*NXXNXXXXXX,1,NoOp(number loading)             ; Dial this each time you change dynamic call back DIDs.
 same = n,Set(abclo=yes)                                        ; Or you could manually insert entries into AstDB.
 same = n,Set(did=${CUT(EXTEN,*,2)})                            ; But doing it this way on the phone is probably easier.
 same = n,Goto(from-external-custom-abc-example-3,${did},1)     ; Also it re-uses the other context so no double-typing of DIDs!

;
; Example #4: Tin Can Mode
; ------------------------
; * Using "Tin Can" mode for Dial to remote instead of Originate.
; * Please see the differences in Modes near the top of this file.

[from-internal-custom-abc-example-4]

exten = 922,1,Set(ex4stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
 same = n,NoOp(placeholder)
 same = n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)  ; Please copy and change as you wish!
 same = n,Set(ABCTO=933)                                        ; CHANGE ME! Remapping of the dial to another number (if any.)
 same = n,Set(ABCTRUNK=#YOUR-TRUNK#)                            ; CHANGE ME! Remapping of the dial to another number (if any.)
 same = n,Set(ABCPATH=PJSIP/${ABCTO}@${ABCTRUNK})               ; CHANGE ME! Endpoint section defined in your PJSIP configuration.
 same = n,Set(ABCCALLBACK=3035550000)                           ; CHANGE ME! Default call back number used if dynamic allocation fails.
 same = n,Set(ABCFRIEND=PJSIP/1113)                             ; CHANGE ME! The local PJSIP endpoint to bridge into the call.
 same = n,Set(ABCTYPENAME=abcex4)                               ; CHANGE ME! Use abcex4 as the conf account name.
 same = n,Set(ABCRINGTIME=120)                                  ; MAYBE CHANGE ME! Rings Remote End / path for 2 minutes.
 same = n,AELSub(pngnpbx-abc-tincan,${ABCTYPENAME})             ; Tin Can mode. Uses Dial instead of Originate to the remote.
 same = n,AELSub(pngnpbx-abc-path,1,${ABCRINGTIME},${ABCPATH})  ; Set the first (and only) call path to use on call to Remote End.
 same = n,AELSub(pngnpbx-abc-remote,${ABCCALLBACK},static)      ; In Tin Can mode, this spawns Originate to a ChanSpy dummy not the Remote End.
 same = n,AELSub(pngnpbx-abc-friend,1,${ABCFRIEND})             ; Bridge in the other attendee automatically.
 same = n,AELSub(pngnpbx-abc-howdy-yall)                        ; In Tin Can mode, this dials the remote and then enters the conference after they answer.
                                                                ; IT DOES NOT IMMEDIATELY PUT THE CALLER INTO THE CONFERENCE BRIDGE.
                                                                ; IT USES A STANDARD DIAL() TO DIRECTLY ROUTE TO THE REMOTE END.
                                                                ; IF THE CALLER HANGS UP BEFORE THE REMOTE END ANSWERS IT WILL DROP ON BOTH SIDES.

;
; Example #5: More advanced FreePBX integration
; ---------------------------------------------
; * In Tin Can Mode (Again)
; * Integrates with FreePBX per-device emergency_cid numbers.
; * Copy this context into your /etc/asterisk/extensions_custom.conf file.
; * Just fill in the #XYZ# variables once for your entire system.
; * Then, create a new Custom Destination in FreePBX to point to:
;
;       from-internal-custom-abc-example-5,s,1
;   
; * Finally, create a new Misc Application in FreePBX to point an
;   extension number to the new Custom Destination eg. 933
; * This example uses legacy chan_SIP instead of newer chan_PJSIP
;

[from-internal-custom-abc-example-5]

exten => s,1,Set(ex5stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,n,NoOp(placeholder)
exten => s,n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)
exten => s,n,Set(cidnum=${FILTER(0-9A-Za-z,${CALLERID(num)})})
exten => s,n,Set(callback=${DB(DEVICE/${cidnum}/emergency_cid)})
exten => s,n,Set(ABCTO=${CALLERID(DNID)})
exten => s,n,Set(path1=SIP/${ABCTO}@#SIPTRUNK-1#) ; chan_sip support
exten => s,n,Set(path2=SIP/${ABCTO}@#SIPTRUNK-2#) ; multiple trunks
exten => s,n,Set(path3=SIP/${ABCTO}@#SIPTRUNK-3#) ; allows failover
exten => s,n,Set(friendAlice=SIP/#SECURITY-EXTENSION#)
exten => s,n,Set(friendBob=SIP/#ERDOCTOR-EXTENSION#)
exten => s,n,Set(vmail1=#FRONTDESK-EXTENSION#@default)
exten => s,n,Set(vmail2=#ITDIRECTOR-EXTENSION#@default)
exten => s,n,Set(abcshrtname=amp)
exten => s,n,Set(ringtime=120)
exten => s,n,Set(vmsecs=3) ; must exceed minsecs in voicemail.conf!
exten => s,n,AELSub(pngnpbx-abc-tincan,${abcshrtname})
exten => s,n,AELSub(pngnpbx-abc-path,1,${ringtime},${path1})
exten => s,n,AELSub(pngnpbx-abc-path,2,${ringtime},${path2})
exten => s,n,AELSub(pngnpbx-abc-path,3,${ringtime},${path3})
exten => s,n,AELSub(pngnpbx-abc-remote,${callback},static)
exten => s,n,AELSub(pngnpbx-abc-friend,1,${friendAlice})
exten => s,n,AELSub(pngnpbx-abc-friend,2,${friendBob})
exten => s,n,AELSub(pngnpbx-abc-vmail,${vmail1}&${vmail2},${vmsecs},0);
exten => s,n,AELSub(pngnpbx-abc-howdy-yall)

;
; Example #6: No Friends just Paladins
; ------------------------------------
; * In Tin Can Mode (Again)
; * Integrates with FreePBX per-device emergency_cid numbers.
; * Creates separate conference for Paladins to discuss amongst themselves.
; * These Palace conferences are separate from Yurt conferences.
; * Does not allow Paladins to interfere in call from OG caller to Remote End.
; * Only feeds in audio to Paladins when Remote End answers the OG caller.

[from-internal-custom-abc-example-6]

exten => s,1,Set(ex6stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,n,NoOp(placeholder)
exten => s,n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)
exten => s,n,Set(cidnum=${FILTER(0-9A-Za-z,${CALLERID(num)})})
exten => s,n,Set(callback=${DB(DEVICE/${cidnum}/emergency_cid)})
exten => s,n,Set(ABCTO=${CALLERID(DNID)})
exten => s,n,Set(path=SIP/${ABCTO}@#SIPTRUNK#)
exten => s,n,Set(palOliver=SIP/#SHAMAN-EXTENSION#)
exten => s,n,Set(palOrlando=SIP/#MENTALHEALTH-EXTENSION#)
exten => s,n,Set(abcshrtname=amppal)
exten => s,n,Set(ringtime=120)
exten => s,n,AELSub(pngnpbx-abc-tincan,${abcshrtname})
exten => s,n,AELSub(pngnpbx-abc-path,1,${ringtime},${path})
exten => s,n,AELSub(pngnpbx-abc-remote,${callback},static)
exten => s,n,AELSub(pngnpbx-abc-paladin,1,${palOliver},)
exten => s,n,AELSub(pngnpbx-abc-paladin,2,${palOrlando},)
exten => s,n,AELSub(pngnpbx-abc-howdy-yall)

;
; Example #7: Set outbound Caller ID number based on Subnet ID number
; -------------------------------------------------------------------
; * In Tin Can Mode (Yes, Again)
; * Paladins only - nosy ones that cause the Palace to listen to the Yurt.
; * Choose caller ID based on subnet ID - requires new AstDB entries eg...
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.1.0 24 3035551234
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.2.0 24 3035552222
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.3.240 30 3035553333
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.3.244 30 3035554444
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.3.248 30 3035555555
;   sirius*CLI> database put pngnpbx/abc/sbntcid/192.168.4.128 28 7205550000
; * The smallest subnet found is used first (so /30 before /29, down to /24).
; * Defaults to FreePBX emergency CID if no subnet override CID is found.

[from-internal-custom-abc-example-7]

exten => s,1,Set(ex7stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,n,NoOp(placeholder)
exten => s,n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)
exten => s,n,Set(cidnum=${FILTER(0-9A-Za-z,${CALLERID(num)})})
exten => s,n,Set(defaultcallback=${DB(DEVICE/${cidnum}/emergency_cid)})
exten => s,n,Set(ABCTO=${CALLERID(DNID)})
exten => s,n,Set(path=SIP/${ABCTO}@#SIPTRUNK#)
exten => s,n,Set(palOliver=SIP/#FRONTDESK-EXTENSION#)
exten => s,n,Set(palOrlando=SIP/#SECURITY-EXTENSION#)
exten => s,n,Set(abcshrtname=sbntpal)
exten => s,n,Set(pathringtime=120)
exten => s,n,AELSub(pngnpbx-abc-tincan,${abcshrtname})
exten => s,n,AELSub(pngnpbx-abc-path,1,${pathringtime},${path})
exten => s,n,AELSub(pngnpbx-abc-remote,${defaultcallback},subnet)
exten => s,n,AELSub(pngnpbx-abc-paladin,1,${palOliver},nosy)
exten => s,n,AELSub(pngnpbx-abc-paladin,2,${palOrlando},nosy)
exten => s,n,AELSub(pngnpbx-abc-howdy-yall)

;
; Example #8: Trolls auto-answer in half-duplex AKA "Page Group"
; --------------------------------------------------------------
; * In Tin Can Mode (Yes, Again)
; * Trolls only. They can not talk to anyone in the YURT.
; * Add "nosy" to troll if they should listen to call.
;   (Without "nosy" option they will just hear an announcement.)
; * Choose caller ID based on subnet ID.
; * Defaults to FreePBX emergency CID if no subnet override CID is found.

[from-internal-custom-abc-example-8]

exten => s,1,Set(ex8stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,n,NoOp(placeholder)
exten => s,n,Log(VERBOSE,Always Be Conferencing - PenguinPBX.com)
exten => s,n,Set(cidnum=${FILTER(0-9A-Za-z,${CALLERID(num)})})
exten => s,n,Set(defaultcallback=${DB(DEVICE/${cidnum}/emergency_cid)})
exten => s,n,Set(ABCTO=${CALLERID(DNID)})
exten => s,n,Set(path=SIP/${ABCTO}@#SIPTRUNK#)
exten => s,n,Set(trollCharlie=SIP/#FRONTDESK-EXTENSION#)
exten => s,n,Set(trollDwight=SIP/#OVERHEADSPKR-EXTENSION#)
exten => s,n,Set(abcshrtname=sbnttrl)
exten => s,n,Set(pathringtime=120)
exten => s,n,AELSub(pngnpbx-abc-tincan,${abcshrtname})
exten => s,n,AELSub(pngnpbx-abc-path,1,${pathringtime},${path})
exten => s,n,AELSub(pngnpbx-abc-remote,${defaultcallback},subnet)
exten => s,n,AELSub(pngnpbx-abc-troll,1,${trollCharlie},nosy)
exten => s,n,AELSub(pngnpbx-abc-troll,2,${trollDwight},)
exten => s,n,AELSub(pngnpbx-abc-howdy-yall)

;
; Example #9: Do It Yourself              DIY
;             Global Positioning System   GPS
;             Interactive Voice Response  IVR
; -------------------------------------------
; Minimal design.
; For use in emergency calling location maintenance.
; Lets users better self-manage their information.

[from-internal-custom-abc-example-9]

exten => s,1,Set(ex9stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,2,Goto(pngnpbx-abc-demo,123*222,1) ; as easy as 123*ABC

;
; Example #10: Insta Teams Mode - as host/admin
; ---------------------------------------------
; For use in Work From Home situations (not emergencies.)
; Lets Managers keep in touch with Team members.
; Minimal design.

[from-internal-custom-abc-example-10]

exten => s,1,Set(ex10stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,2,Goto(pngnpbx-abc-demo,222486,1)

; Example #11: Insta Teams Mode - as Team member who just missed a call
; ---------------------------------------------------------------------
; Lets callers get back into the conference.

[from-internal-custom-abc-example-11]

exten => s,1,Set(ex11stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,2,NoOp(TODO)

;
; Example #12: Voicemail Meta-Data Only Notification
; --------------------------------------------------
; Provides voicemail-to-email alert emails only.
; Includes call meta-data such as date and time in the email.
; Does not record any call audio into the attached voicemail.

[from-internal-custom-abc-example-12]

exten => s,1,Set(ex12stamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC)
exten => s,2,NoOp(TODO)

;
; Example #13: Really Fast Parallel Dial Method that generates Voicemail
; ----------------------------------------------------------------------
; Easiest integration choice with most existing ASTERISK 13-20.
; Sets up ABC using Dial() application by adding outbound Local channel.
; Change #YOUR-TRUNK# as appropriate per your PJSIP configuration.
; (Should also work with other channel techs eg. SIP, DAHDI, IAX2, OOH323, etc.)
; Note the 'r' option to dial for ring-back -- otherwise it will be silent ring.
; --> Also you must pre-configure the notify-ees' voicemail boxes in abc.conf file,
; but you can probably re-use existing entries (or make new ones -- paying
; attention to 'emailsubject' and 'emailbody' options to clarify the email.)
; Finally, the Parallel VM Mode doesn't actually do any conferencing -- sad ;( --
; but some users want this method of notification -- and ABC can make it easier,
; while integrating other interesting things like GPS/PLUSCODE location info!

[from-internal-custom-abc-example-13]

exten => 922,1,Dial(PJSIP/${EXTEN}@#YOUR-TRUNK#&Local/${EXTEN}@pngnpbx-abc-parallel-vm-notify,,r)

;
; Example #14: Really Fast Parallel Dial Method that generates Pages
; ------------------------------------------------------------------
; Slightly more involved than Example #13 but not by much.
; Allows for near-immediate nofications with minimal impact to your dial plan.
; Plays back A-B-C notes then call meta data info in the Page audio stream
; eg. A-B-C (notes) then "emergency 9 2 2 call from 7 7 7 dash A D A M"
; Change #YOUR-TRUNK# as appropriate per your PJSIP configuration.
; Only tested with PJSIP (as most things in ABC are.)
; --> Remember to add the parapg lines into abc.conf to specify Page-ees.

[from-internal-custom-abc-example-14]

exten => 922,1,Dial(PJSIP/${EXTEN}@#YOUR-TRUNK#&Local/${EXTEN}@pngnpbx-abc-parallel-pg-notify,,r)

;
; Example #15: Really Fast Parallel Dial Method that generates both Voicemails and Pages
; --------------------------------------------------------------------------------------
; Combination of Examples #13 and #14. The best of both worlds.
; Shows different handling based on Caller ID so eg. extension 555 won't Page itself!
; --> Remember to add both paravm and parapg lines into abc.conf for this to work.

[from-internal-custom-abc-example-15]

exten => 922/555,1,Dial(PJSIP/${EXTEN}@#YOUR-TRUNK#&Local/${EXTEN}@pngnpbx-abc-parallel-vm-notify)
exten => 922,1,Dial(PJSIP/${EXTEN}@#YOUR-TRUNK#&Local/${EXTEN}@pngnpbx-abc-parallel-vm-notify&Local/${EXTEN}@pngnpbx-abc-parallel-pg-notify,,r)

; same effect - thin and tall version

[from-internal-custom-abc-example-15-thin-and-tall]

exten => 922,1,Set(abc15vm=&Local/${EXTEN}@pngnpbx-abc-parallel-vm-notify)
exten => 922,2,Set(abc15pg=&Local/${EXTEN}@pngnpbx-abc-parallel-pg-notify)
exten => 922/555,2,NoOp(skip page for users with Caller ID 555)
exten => 922,3,Dial(PJSIP/${EXTEN}@#YOUR-TRUNK#${abc15vm}${abc15pg},,r)


; End of Examples sub-section



Frequently Asked Questions (FAQs)
=================================

Question:

    What are the conference menu options in EOC modes ?

Answer:

    * SPLAT - YOU ARE HERE! TTS the GPS of the caller into the conference.
    # HASH - "H"alts any TTS / automated message playbacks.
    0 OPERator (TODO: Play back all of the menu options. Just to your phone.)
    1 Count out number of participants in the conference.
    2 "A"dditional information (eg. Room Number) is spoken into the conference.
    3 "D"ecrease listening volume - only on your phone.
    4 "I"ncrease listening volume - only on your phone.
    5 "L"ocal extension number is spoken into the conference.
    6 "N"umber to call back and reach the caller is spoken into the conference.
    7 "S"treet address and additional info of caller spoken into the conference.
    8 TBD
    9 "Y"es - Sends audio "yes dear" eg. when asked yes/no question by operator.

Question:

    What are the conference key pad menu options in Insta Teams Mode / Work From Home ?

Answer:

    USERS (Friends)
    *0 move from one of 9 break-out corners of Yurt back into middle of Yurt.
    *#1 through *#9 - move to a break-out corner #1-9 with other Users.
    *2 "A"mp/increase listening volume - only on your phone.
    *3 "D"ecrease listening volume - only on your phone.
    *6 "M"ute or un"M"ute yourself.
    *9 "W"ave hand / make a point of order/information request.
    ** Playback user menu options.

    ADMIN (The OG)
    *0 move all Friends back from 9 break-out corners into middle of Yurt
    *2 "A"mp/increase listening volume - only on your phone.
    *3 "D"ecrease listening volume - only on your phone.
    *4 "H"angup the conference.
    *5 "L"ock conference.
    *6 "M"ute or un"M"ute yourself.
    *7 "R"ecording start/stop. (TODO/MAYBE - currently recording is all-or-nothing)
    *8 "T"ry dialing Friends again if they did not answer or hung up too early.
    *9 "W"ave hand / make a point of order/information request.
    99 "ZZ"zzz - Mute or unMute ALL participants.
    *# Count out number of participants in the conference.
    ** Playback admin menu options.

Question:

    Who is in the "Yurt" vs. the "Palace" conference rooms ?

Answer:

    The "Yurt" is for OG caller, Remote End, Friends (if any) and Trolls
    (if any.)

    The "Palace" is for the Paladins (if any.) Palaces can read audio from Yurt
    streams but not write back to them. Paladins can still access DTMF menu
    options and talk to other Paladins. They just can't talk to OG caller,
    Remote End, nor any of the OG caller's Friends. Nor will Trolls hear
    Paladins.

Question:

    Can I integrate ABC with FreePBX ?

Answer:

    Yes, there are several examples which highlight this. But ABC needs to
    take over the call flow very early on. It will probably not work from
    something like a predial macro hook. Instead, use [from-internal-custom]
    context inclusion methods; or Custom Destination & Misc Application; or
    per-device context adjustment (may be under the Extension's Advanced tab.)

Question:

    Why do I hear ring back tone until the friend(s) pick up and answer ?

Answer:

    You'll need to add a new line to indications.conf for each tone zone
    you offer to your users in order to produce a 'silent' ringer.

    (...scroll down to find the section...)
    [us]
    description = United States / North America
    silent = 0/15000
    (...the rest of the tones...)

    ...but to avoid a restart, for testing, on the ASTERISK CLI, you can do:

        sirius*CLI> indication add us silent 0/15000

Question:

    Why use 922 as the example extension that users will dial to reach 933 ?

Answer:

    922 is currently only used for the police in Tonga. And it might help
    users distinguish between competing providers of different brands of
    operator services at the Remote End -- maybe a useful scenario if the
    public safety departments are defunded in your area. Other 9XX numbers
    in the following ranges could be good to test with in most countries:

        901-910
        914-918
        920-932
        934-976
        978-989

    Lots of countries use 1XX numbers. ABC is configurable. It is up to you.
    Please consult your local numbering plan rules before making changes.
    You might even decide to ABC-enable several different outbound numbers --
    nothing in ABC limits you to 3-digit numbers! Try 7/10/11 digits, etc.!

Question:

    Wait, could ABC be used to help open up free market competition with
    existing emergency operator service monopolies in given geographic areas,
    without pre-loading private personal GPS address information for every
    telecommuter in the USA up in to massive centralized databases of detailed
    location directions to the nation's critical capital infrastructure ?

Answer:

    Maybe but that is currently beyond the scope of this technical document.

Question:

    Who will answer the phone when you dial 112/911/999/etc. ?

Answer:

    Not a technical question, but with ABC it doesn't just have to be the PSAP.
    (This is not legal advice -- nothing in ABC is -- talk to your attorney.)

Question:

    How much delay does ABC usually introduce in routing the call ?

Answer:

    Less than 100 milliseconds on modern hardware using Examples #1-#8. However,
    Example #13 is much faster. Slightly aside, it is probably impossible to
    completely eliminate delay because even if you were to tail the logs from
    separate process(es), you would be introducing delay just by increasing the
    verbosity of the logging itself in order to grep the needle that you are
    looking for in the haystack of extra data. Additional log tailing problems
    could arise if your log partition fills up and stops recording new data,
    your separate process(es) crash and fail to restart, etc. Using dial plan
    eliminates many of these concerns -- as long as your PBX is handling calls,
    by way of extensions.conf/extensions.ael, then ABC can (mostly) keep working.


Thank you for reading!

This long descriptive AEL comment ends right here at the splat slash. */


/****************************************************************************
 * BEGIN PUBLIC SECTION                                                     *
 * This section contains macros and contexts that should be entered from    *
 * somewhere outside of this file.                                          *
 ****************************************************************************/

/* PUBLIC */
/* Either "init", "simple", "tincan", "psap", "wfh", "wfo", "ronr", "doorbell",
 * or "parallel".
 * Must be entered, from somewhere outside of this file, to start up ABC. */
macro pngnpbx-abc-simple(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,simple,eoc,audio);
    return;
}

/* PUBLIC */
/* SMH but IANAL */
/* See top of file for some information on differences between Modes. */
macro pngnpbx-abc-tincan(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,tincan,eoc,audio);
    return;
}

/* PUBLIC */
/* The 'parallel' non-conference mode. */
macro pngnpbx-abc-parallel(shorty_,dnid_) {
    &pngnpbx-abc-init(${shorty_},,,,,parallel,eoc,audio);
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dnid)=${dnid_});
    return;
}

/* PUBLIC */
/* Public Safety Answering Point */
/* For inbound call centers handling emergencies. */
macro pngnpbx-abc-psap(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,simple,eic,audio);
    return;
}

/* PUBLIC */
/* Work From Home */
/* Reach your Team on the phone with minimal button presses. */
macro pngnpbx-abc-wfh(shorty_,conftimeout_,abcid_) {
    &pngnpbx-abc-init(${shorty_},,${conftimeout_},${abcid_},prompted,teams,wfh,audio);
    return;
}

/* PUBLIC */
/* Work From Office */
/* Very similar to Work From Home but adds more SIP
 * messaging such as fancier caller ID displays on 
 * desk phones. */
macro pngnpbx-abc-wfo(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,simple,wfo,audio);
    return;
}

/* PUBLIC */
/* Roberts Rules of Order Newly Revised */
/* Makes for smoother meetings. */
macro pngnpbx-abc-ronr(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,simple,ronr,audio);
    return;
}

/* PUBLIC */
/* Video door bell. */
macro pngnpbx-abc-doorbell(shorty_) {
    &pngnpbx-abc-init(${shorty_},,,,,simple,doorbell,video);
    return;
}

/* PUBLIC */
/* The "init" macro (re)sets up several things for the conference room.
 * 
 * Parameters:
 *
 *  shorty_
 *      Any string you like 0-9a-zA-Z. It will be used as the account
 *      number on all calls, and for other purposes.
 *  record_
 *      Record all legs in WAV files.
 *      Takes a string that must equal "record" to activate.
 *      Defaults to not recording media streams.
 *  conftimeout_
 *      Drop all conference users after this many seconds.
 *  abcid_
 *      Choose one yourself, or the caller ID number will be used.
 *  announce_
 *      Whether to automatically play back information to some users.
 *      Takes a string that must equal "announce" to activate.
 *      Defaults to not annonunce info to most users. (Exceptions are Trolls.)
 *      Other option is "prompted" to require users to press 1 to
 *      accept the call before they get placed into the Yurt.
 *  mode_
 *      Choice of: simple, tincan, teams, parallel.
 *      Defaults to Simple Mode.
 *  scenario_
 *      Use a string to adjust conference bridge options, IVRs, and more:
 *          1. default (or just an empty string) - does the basics
 *          2. eoc - emergency outbound calling (eg. E911 Kari & RAY)
 *          3. eic - emergency inbound calling (eg. NG911 PSAPs) - TODO!
 *          4. wfo - work from office (eg. on-site desk phones) - TODO!
 *          5. wfh - work from home (eg. remote during biggubmint over-reaction)
 *          6. ronr - roberts rules of order (eg. HOA board meetings) - TODO!
 *          7. doorbell - video between some SIP devices
 *  video_
 *      Whether to activate video in addition to audio.
 *          
 */
macro pngnpbx-abc-init(shorty_,record_,conftimeout_,abcid_,announce_,mode_,scenario_,video_) {
    Set(LOCAL(startstamp)=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC);
    local cnftmt=;
    DumpChan(5);

    if( ${LEN(${shorty_})} > 0 ) {
        Set(pngnpbx_abc_shorty=${shorty_});
    } else {
        Set(pngnpbx_abc_shorty=default);
    }

    Set(CHANNEL(accountcode)=${pngnpbx_abc_shorty});

    if( ${LEN(${abcid_})} > 0 ) {
        Set(pngnpbx_abc_id=${FILTER(0-9a-zA-Z,${abcid_})});
    } else {
        // This default only works if each phone has a unique caller ID number.
        // Otherwise, you'll need to specify your own conference ID number.
        // (But if your extensions have matching numbers... TODO on specfics.)
        Set(pngnpbx_abc_id=${FILTER(0-9a-zA-Z,${CALLERID(num)})});
    }

    Set(cnftmt=${FILTER(0-9,${conftimeout_})});

    if( ${LEN(${cnftmt})} == 0 ) {
        Set(cnftmt=14400);
    }

    // TODO: Check if the conference is already/still running.
    DBdeltree(pngnpbx/abc/cb/${pngnpbx_abc_id});

    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/init)=${startstamp});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/ogchan)=${CHANNEL(name)});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/shorty)=${pngnpbx_abc_shorty});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/cidnum)=${CALLERID(num)});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/cidname)=${CALLERID(name)});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dnid)=${CALLERID(DNID)});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/conftimeout)=${cnftmt});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/yurt/ttsactive)=0);
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/palace/ttsactive)=0);

    if( "x${TOLOWER(${record_})}" == "xrecord" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/record)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/record)=no);
    }

    if( "x${TOLOWER(${announce_})}" == "xannounce" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/announce)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/announce)=no);
    }

    if( "x${TOLOWER(${announce_})}" == "xprompted" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/prompted)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/prompted)=no);
    }

    if( "x${TOLOWER(${mode_})}" == "xtincan" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/tincan)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/tincan)=no);
    }

    if( "x${TOLOWER(${mode_})}" == "xteams" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/teams)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/teams)=no);
    }

    if( "x${TOLOWER(${mode_})}" == "xparallel" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/parallel)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/parallel)=no);
    }

    if( ${LEN(${scenario_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/scenario)=${TOLOWER(${scenario_})});
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/scenario)=default);
    }

    if( "x${TOLOWER(${video_})}" == "xvideo" ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/video)=yes);
    } else {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/video)=no);
    }

    return;
}

/* PUBLIC */
/* The "remote" macro should be entered once per conference.
 * It is (arguably) the most important destination and (probably) what the user
 * originally dialed, at least during emergency call modes.
 * But it is possible to have just Friends and no Remote End,
 * however a bunch of things are not set up in that case. */
macro pngnpbx-abc-remote(cidnum_,usedynamiccid_) {
    local gotdyno=no;
    local gotsbnt=no;
    local maybedid=;
    local maybecid=;
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    Set(LOCAL(mytincan)=${DB(${dbcb}/${pngnpbx_abc_id}/tincan)});
    Set(LOCAL(myparallel)=${DB(${dbcb}/${pngnpbx_abc_id}/parallel)});
    Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-bridge);

    if( "x${TOLOWER(${usedynamiccid_})}" == "xdynamic" ) {
        // TODO: Use LOCK function with Dynamic CID-DID.
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(maybedid=${DB(pngnpbx/abc/dynodid/callback/${i})});
            if( ${LEN(${maybedid})} > 0 ) {
                Set(LOCAL(dbdyno)=pngnpbx/abc/dynodid);
                Set(LOCAL(og)=${DB(${dbdyno}/ogcaller/${maybedid})});
                Set(LOCAL(lastcall)=${DB(${dbdyno}/lastcall/${maybedid})});
                Set(LOCAL(difftime)=$[${EPOCH}-${lastcall}]);
                if( ${LEN(${og})} == 0 || ${difftime} >= 3600 ) {
                    Set(LOCAL(ognow)=${DB(${dbcb}/${pngnpbx_abc_id}/cidnum)});
                    Set(DB(${dbdyno}/lastcall/${maybedid})=${EPOCH});
                    Set(DB(${dbdyno}/ogcaller/${maybedid})=${ognow});
                    Set(gotdyno=yes);
                    break;
                }
            }
        }
        if( "x${gotdyno}" != "xyes" ) {
            Log(WARNING,Dynamic CID-DID allocation based on pool failed. Using default.);
            maybedid=${cidnum_};
        }

    } else if( "x${TOLOWER(${usedynamiccid_})}" == "xsubnet" ) {
        // Only works if phone is directly contacting this PBX.
        // TODO: test proxy situations
        Set(LOCAL(frmipport)=${CHANNEL(pjsip,remote_addr)});
        Set(LOCAL(ipx)=${CUT(frmipport,:,1)});
        Set(LOCAL(ddd)=${CUT(ipx,.,4)});
        Set(LOCAL(frmslash24)=${CUT(ipx,.,1-3)});

        Set(LOCAL(p)=1);
        Set(LOCAL(q)=);
        Set(LOCAL(r)=);
        Set(LOCAL(s)=);
        Set(LOCAL(t)=);
        // consider the most specific network first
        for( s=30; ${s} >= 24; s=${s} - 1 ) {
            q=${MATH(2^${INC(p)},int)};
            r=${MATH(${ddd}%${q},int)};
            t=${MATH(${ddd}-${r},int)};
            Set(maybecid=${DB(pngnpbx/abc/sbntcid/${frmslash24}.${t}/${s})});
            if( ${LEN(${maybecid})} > 0 ) {
                Set(gotsbnt=yes);
                break;
            }
        }

        if( "x${gotsbnt}" != "xyes" ) {
            // Dynamic CID allocation based on subnet failed.
            Log(WARNING,Dynamic CID allocation based on subnet failed. Using default.);
            maybecid=${cidnum_};
        }

    } else {
        // static, empty or otherwise unknown - so use param as default
        maybedid=${cidnum_};
    }

    // either one - may be cid or may be did
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/outboundcidnum)=${maybedid}${maybecid});
    if( "x${myparallel}" == "xyes" ) {
        NoOp(parallel mode does not affect outbound dialing);
    } else if( "x${mytincan}" == "xyes" ) {
        &pngnpbx-abc-originate(${pvt},pngnpbx-abc-spy-barge,${pngnpbx_abc_id},);
    } else {
        &pngnpbx-abc-originate(${pvt},pngnpbx-abc-dial,${pngnpbx_abc_id}!0ABC,);
    }
    return;
}

/* PUBLIC */
/* The "friend" macro can be entered multiple times, once per each
 * additional participant. They will enter the SAME YURT. */
macro pngnpbx-abc-friend(pos_,dialstr_) {
    local myexten=${CUT(dialstr_,/,2)};
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    Set(LOCAL(mycidnum)=${DB(${dbcb}/${pngnpbx_abc_id}/cidnum)});
    Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-bridge);
    // TODO: more loop prevention using GROUP function
    // (need to test bad forwarding eg. loops, wrong numbers, etc.)
    if( "x${myexten}" != "x${mycidnum}" ) {
        Set(DB(${dbcb}/${pngnpbx_abc_id}/friend/${pos_}/dialstr)=${dialstr_});
        &pngnpbx-abc-originate(${pvt},pngnpbx-abc-dial-friend,${pngnpbx_abc_id}!${pos_},);
    }
    return;
}

/* PUBLIC */
/* The "troll" macro can be entered multiple times, once per each
 * additional participant. They will enter the SAME YURT.
 * Probably they will be in the YURT before Friends and Remote End.
 * "nosy" Trolls listen to an announcement and then the actual call.
 * non-"nosy" Trolls just get an announcment. */
macro pngnpbx-abc-troll(pos_,dialstr_,nosy_) {
    local myexten=${CUT(dialstr_,/,2)};
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    Set(LOCAL(mycidnum)=${DB(${dbcb}/${pngnpbx_abc_id}/cidnum)});
    Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-bridge);
    // TODO: more loop prevention using GROUP function
    // (need to test bad forwarding eg. loops, wrong numbers, etc.)
    if( "x${myexten}" != "x${mycidnum}" ) {
        Set(DB(${dbcb}/${pngnpbx_abc_id}/troll/${pos_}/dialstr)=${dialstr_});
        Set(DB(${dbcb}/${pngnpbx_abc_id}/troll/${pos_}/nosy)=${nosy_});
        &pngnpbx-abc-originate(${pvt},pngnpbx-abc-dial-troll,${pngnpbx_abc_id}!${pos_},);
    }
    return;
}

/* PUBLIC */
/* The "paladin" macro can be entered multiple times, once per each
 * additional participant. They will enter the SAME PALACE. From there,
 * they can listen to FRIENDS and REMOTE END in the corresponding YURT
 * but not talk to them. However, the Paladins can talk to other Paladins
 * in the SAME PALACE.
 * Important: Palaces are default non-nosy -- meaning they do not
 * listen to the Yurt. You can change this by making any one Paladin nosy,
 * then, the entire Palace will be nosy and be listening to the Yurt. */
macro pngnpbx-abc-paladin(pos_,dialstr_,nosy_) {
    local myexten=${CUT(dialstr_,/,2)};
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    Set(LOCAL(mycidnum)=${DB(${dbcb}/${pngnpbx_abc_id}/cidnum)});
    Set(LOCAL(pvtpal)=Local/${pngnpbx_abc_id}@pngnpbx-abc-palace);
    // TODO: more loop prevention using GROUP function
    // (need to test bad forwarding eg. loops, wrong numbers, etc.)
    if( "x${myexten}" != "x${mycidnum}" ) {
        Set(DB(${dbcb}/${pngnpbx_abc_id}/paladin/${pos_}/dialstr)=${dialstr_});
        &pngnpbx-abc-originate(${pvtpal},pngnpbx-abc-dial-paladin,${pngnpbx_abc_id}!${pos_},);
        if( "x${nosy_}" == "xnosy" ) {
            &pngnpbx-abc-originate(${pvtpal},pngnpbx-abc-spy-listen,${pngnpbx_abc_id},);
        }
    }
    return;
}


/* PUBLIC */
/* The "paths" macro supports multiple dial strings to try and
 * reach the far end, in a failover manner, in case some routes are down. */
macro pngnpbx-abc-path(position_,timeout_,dialstr_) {
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    Set(DB(${dbcb}/${pngnpbx_abc_id}/outpath/${position_}/dialstr)=${dialstr_});
    Set(DB(${dbcb}/${pngnpbx_abc_id}/outpath/${position_}/timeout)=${timeout_});
    return;
}

/* PUBLIC */
/* The "vmail" macro is optional. Sends a voicemail about the call.
 * First N seconds of the call is attached as the voicemail.
 * When N is 0 or less, only meta-data is recorded, no actual call audio.
 * Important: if you want audio of the call, then make sure that
 * vmsecs_ is greater than the minsecs variable in your voicemail.conf file.
 * boxes_ is which voicemail boxes to leave messages in.
 * The grp_ parameter must change each time you enter this macro
 * from the same call leg using the same pngnpbx_abc_id value. */
macro pngnpbx-abc-vmail(boxes_,vmsecs_,grp_) {
    Set(LOCAL(vms)=${vmsecs_});
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    if( ${vms} > 0 ) {
        Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-trolling);
    } else {
        Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-vmdata);
        Set(vms=30);
    }
    Set(DB(${dbcb}/${pngnpbx_abc_id}/vmailboxes/${grp_})=${boxes_});
    &pngnpbx-abc-originate(${pvt},pngnpbx-abc-vmdrop,${pngnpbx_abc_id}!${vms}!${grp_},);
    return;
}

/* PUBLIC */
/* The "page" macro is optional. Sends a page about the call.
 * phones_ is which phones to page.
 * The grp_ parameter must change each time you enter this macro
 * from the same call leg using the same pngnpbx_abc_id value. */
macro pngnpbx-abc-page(phones_,pgsecs_,grp_) {
    Set(LOCAL(pgs)=${pgsecs_});
    Set(LOCAL(dbcb)=pngnpbx/abc/cb);
    if( ${pgs} > 0 ) {
        Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-trolling);
    } else {
        Set(LOCAL(pvt)=Local/${pngnpbx_abc_id}@pngnpbx-abc-pgdata);
        Set(pgs=60);
    }
    Set(DB(${dbcb}/${pngnpbx_abc_id}/pagephones/${grp_})=${phones_});
    &pngnpbx-abc-originate(${pvt},pngnpbx-abc-pgdrop,${pngnpbx_abc_id}!${pgs}!${grp_},);
    return;
}

/* PUBLIC */
/* The "gps" macro is optional; if used it should be entered just after "init".
 *
 * Paramaters:
 *  plc_    Plus Code - see https://plus.codes/
 *  lat_    Latitude (decimal)
 *  lng_    Longitude (decimal)
 *  elv_    Elevation or Depth (scalar integer)
 *  uni_    Units of Elevation or Depth eg. feet/meters (string)
 *  url_    URL to send in SIP Geolocation headers
 */
macro pngnpbx-abc-gps(plc_,lat_,lng_,elv_,uni_,url_) {
    // TODO: more error checking on the params

    &pngnpbx-abc-polo(${pngnpbx_abc_id});

    if( ${LEN(${plc_})} == 0 ) {
        Set(plc_=${abcdplc});
    }
    if( ${LEN(${lat_})} == 0 ) {
        Set(lat_=${abcdlat});
    }
    if( ${LEN(${lng_})} == 0 ) {
        Set(lng_=${abcdlng});
    }
    if( ${LEN(${elv_})} == 0 ) {
        Set(elv_=${abcdelv});
    }
    if( ${LEN(${uni_})} == 0 ) {
        Set(uni_=${abcduni});
    }

    if( ${LEN(${plc_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/plc)=${plc_});
    }
    if( ${LEN(${lat_})} > 0 && ${LEN(${lng_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/lat)=${lat_});
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/lng)=${lng_});
    }
    if( ${LEN(${elv_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/elv)=${elv_});
    }
    if( ${LEN(${uni_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/uni)=${uni_});
    }
    if( ${LEN(${url_})} > 0 ) {
        Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/gps/url)=${url_});
    }

    return;
} 

/* PUBLIC */
/* The "sa" macro is to add the street address. */
macro pngnpbx-abc-sa(street_,city_,state_,zip_) {
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dloc/street)=${street_});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dloc/city)=${city_});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dloc/state)=${state_});
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dloc/zip)=${zip_});
    return;
}

/* PUBLIC */
/* The "ai" macro is to add additional information to the street address. */
macro pngnpbx-abc-ai(info_) {
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/dloc/ainfo)=${info_});
    return;
}

/* PUBLIC */
/* The "reentry" macro is for dynamic callback number mapping. */
macro pngnpbx-abc-reentry(position_,didcid_,abcloadingonly_) {
    Set(dynodid=${FILTER(0-9a-zA-Z,${didcid_})});
    Set(ogcaller=${DB(pngnpbx/abc/dynodid/ogcaller/${dynodid})});
    Set(currdid=${DB(pngnpbx/abc/dynodid/callback/${position_})});

    if( ${LEN(${currdid})} == 0 || "x${currdid}" != "x${dynodid}" ) {
        Set(DB(pngnpbx/abc/dynodid/callback/${position_})=${dynodid});
    }

    if( "x${abcloadingonly_}" == "xyes" ) {
        Answer();
        &pngnpbx-abc-tones();
        SayAlpha(${didcid_});
        Playback(position);
        SayNumber(${position_});
    } else {
        if( ${LEN(${ogcaller})} > 0 ) {
            Progress();
            // TODO: make this work with chan_sip too
            Dial(${PJSIP_DIAL_CONTACTS(${ogcaller})},300,giI);
            Hangup();
        } else {
            Congestion(10); // TODO: Do more than congestion.
        }
    }

    return;
}

/* PUBLIC */
/* The "howdy-yall" macro is the final needed step for connecting the caller. */
macro pngnpbx-abc-howdy-yall() {
    Set(nowstamp=${STRFTIME(,UTC,%F %H:%M:%S.%3q)} UTC);
    Set(DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/howdy)=${nowstamp});

    local mytincan=${DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/tincan)};
    local myteams=${DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/teams)};

    &pngnpbx-abc-clu(,${TOUPPER(${pngnpbx_abc_shorty})} ConfCall);
    &pngnpbx-abc-cbo(${pngnpbx_abc_id},yurt);
    CONFBRIDGE(user,marked)=yes;

    &pngnpbx-abc-video();

    if( "x${myteams}" == "xyes" ) {
        Set(CHANNEL(hangup_handler_push)=pngnpbx-abc-wfh-empty-yurt-sub,~~s~~,1);
        &pngnpbx-abc-cbo-wfh-admin();
        &pngnpbx-abc-cbo-wfh-menu-admin();
        &pngnpbx-abc-clu(,Yurt Menu Press **);
        Set(PHID=${PERIODIC_HOOK(pngnpbx-abc-phooks,theog,60)});
        Set(PERIODIC_HOOK(${PHID})=on);
    }

    if( "x${mytincan}" == "xyes" ) {
        goto pngnpbx-abc-dial,${pngnpbx_abc_id}!0ABC,1;
    } else {
        Answer();
        Set(cb=pngnpbx-abc-yurt-${pngnpbx_abc_id});
        Set(pvthola=Local/abc!${pngnpbx_abc_id}!yurt@pngnpbx-abc-hola-anchor);
        &pngnpbx-abc-originate(${pvthola},pngnpbx-abc-tts,abc!${pngnpbx_abc_id}!yurt,);
        ConfBridge(${cb});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        if( "x${myteams}" == "xyes" ) {
            &pngnpbx-abc-wfh-empty-yurt-sub();
        }
    }

    return;
}

/* PUBLIC */
/* The "parallel-vm-notify" context integrates with the
 * parallel feature of Dial() application plus Local channels.
 * It originates phone calls to the VoiceMail() application.
 * Recipients of the voicemail are defined in abc.conf config file.
 * See Examples #13 and #15 for details. */
context pngnpbx-abc-parallel-vm-notify {
    _X. => {
        Set(__sABCOGCIDNUM=${FILTER(0-9a-zA-Z,${abc_ogcidnum})});
        Set(__sABCOGCIDNAME=${FILTER(0-9a-zA-Z,${abc_ogcidname})});
        Set(paravmboxes=);
        DumpChan(5);
        &pngnpbx-abc-parallel(${sABCOGCIDNUM:0:9}-${sABCOGCIDNAME:0:8},${EXTEN});
        &pngnpbx-abc-gps(,,,,,); // gets GPS, if any
        for( i=0; ${i} <= 9; i=${i} + 1 ) {
            Set(p=${AST_CONFIG(abc.conf,eoc,paravm,${i})});
            if( ${LEN(${p})} == 0 ) {
                break;
            } else {
                Set(PUSH(paravmboxes,&)=${p});
            }
        }
        if( ${LEN(${paravmboxes})} == 0 ) {
            Log(ERROR,Nobody to notify?! Check abc.conf [eoc] section for paravm settings!);
        } else {
            &pngnpbx-abc-vmail(${paravmboxes},0,0); // meta-data only
        }
    }
}

/* PUBLIC */
/* The "parallel-pg-notify" context integrates with the
 * parallel feature of Dial() application plus Local channels.
 * It originates phone calls to the Page() application.
 * Recipients of the page are defined in abc.conf config file.
 * See Examples #14 and #15 for details. */
context pngnpbx-abc-parallel-pg-notify {
    _X. => {
        Set(__sABCOGCIDNUM=${FILTER(0-9a-zA-Z,${abc_ogcidnum})});
        Set(__sABCOGCIDNAME=${FILTER(0-9a-zA-Z,${abc_ogcidname})});
        Set(parapgphones=);
        DumpChan(5);
        &pngnpbx-abc-parallel(${sABCOGCIDNUM:0:9}-${sABCOGCIDNAME:0:8},${EXTEN});
        &pngnpbx-abc-gps(,,,,,); // gets GPS, if any
        for( i=0; ${i} <= 9; i=${i} + 1 ) {
            Set(p=${AST_CONFIG(abc.conf,eoc,parapg,${i})});
            if( ${LEN(${p})} == 0 ) {
                break;
            } else {
                Set(PUSH(parapgphones,&)=${p});
            }
        }
        if( ${LEN(${parapgphones})} == 0 ) {
            Log(ERROR,Nobody to notify?! Check abc.conf [eoc] section for parapg settings!);
        } else {
            &pngnpbx-abc-page(${parapgphones},0,0); // meta-data only
        }
    }
}

/* PUBLIC */
/* The "user-training-mode" gets callees into main GPS DIY IVR. */
context pngnpbx-abc-user-training-mode {    
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z,${EXTEN})});
        if( ${LEN(${sEXTEN})} > 0 ) {
            &pngnpbx-abc-account(${sEXTEN});
            &pngnpbx-abc-tones();
            goto pngnpbx-abc-ivr-diy-gps,s,1;
        }
    }
}

/* PUBLIC */
/* The "ivr-diy-gps" context is for users to self update their phone location.
 * Interactive Voice Response - Do It Yourself - Global Positioning System
 * Provides Location Generator (LG) role per RFC 6280 Section 3.2 definition.
 * Accept precision of ~100m down to 1m (3-5 decimal places)
 * TODO: allow copy of co-ords from another user (with or without confirmation)
 * TODO: maybe generate an email whenever a user updates their location.
 * TODO: error checking on all values
 * TODO: lock down who can enter this IVR. */
context pngnpbx-abc-ivr-diy-gps {
    s => {
        &pngnpbx-abc-clu(123*ABC,Welcome to ABC!);
        Answer();
        Set(scli=);
        Set(splc=);
        Set(slat=);
        Set(slng=);
        Set(suni=);
        Set(selv=);
        Set(TIMEOUT(digit)=2);
        Background(get_information);
    plc:
        &pngnpbx-abc-clu(Press-Star-Star,Use CLIPS Code ?);
        Background(for&letters/c&letters/l&letters/i&letters/p&letters/s);
        Background(encode&press-star&digits/2&times);
        &pngnpbx-abc-clu(Press-Star-Pound,Use Plus Code ?);
        Background(for&letters/plus&encode&press-star&then-press-pound);
        WaitExten(3);
        Background(moving&on);
    lat:
        &pngnpbx-abc-clu(39*7394,Latitude ?);
        Background(please-enter-the);
        Background(letters/l&letters/a&letters/t);
        Background(then-press-pound);
        Background(for&letters/dot&press-star);
        Background(for&negative&number);
        Background(please-try&digits/0);
        Background(before-the-number); // so 075.757 equals -75.757
        WaitExten(2);
        Background(letters/l&letters/a&letters/t);
        WaitExten(10);
        Hangup();
    lng:
        &pngnpbx-abc-clu(0104*990,Longitude ?);
        Background(that-tickles); // not wearing pants
        Background(now);
        Background(letters/l&letters/n&letters/g);
        WaitExten(2);
        Background(letters/l&letters/n&letters/g);
        WaitExten(10);
        Hangup();
    uni:
        &pngnpbx-abc-clu(Options-1-2-3-4-5,Units ?);
        Background(astcc-please-enter-your);
        Background(position&units);
        Background(now);
        &pngnpbx-abc-clu(Press1,Feet);
        Background(your&feet&press-1);
        &pngnpbx-abc-clu(Press2,Meters);
        Background(meters&press-2);
        &pngnpbx-abc-clu(Press3,Floor Number);
        Background(ha/floor&number&press-3);
        &pngnpbx-abc-clu(Press4,Room Number);
        Background(ha/room&number&press-4);
        &pngnpbx-abc-clu(Press5,Building Number);
        Background(otherwise&number&press-5);
        WaitExten(2);
        &pngnpbx-abc-clu(Options-1-2-3-4-5,Units ?);
        Background(units&units); // not wearing pants
        WaitExten(1);
        &pngnpbx-abc-clu(Press1,Feet press 1);
        Background(feet&press-1);
        &pngnpbx-abc-clu(Press2,Meters press 2);
        Background(meters&press-2);
        &pngnpbx-abc-clu(Press3,Floor Num. press 3);
        Background(ha/floor&number&press-3);
        &pngnpbx-abc-clu(Press4,Room Num. press 4);
        Background(ha/room&number&press-4);
        &pngnpbx-abc-clu(Press5,Building Num. press 5);
        Background(otherwise&number&press-5);
        &pngnpbx-abc-clu(Options-1-2-3-4-5,Units ?);
        WaitExten(10);
        Hangup();
    elv:
        &pngnpbx-abc-clu(5280,Elevation ?);
        //Background(what-are-you-wearing); // not wearing pants
        Background(now);
        Background(your&altitude);
        &pngnpbx-abc-clu(0123,Or Depth ? 0=minus);
        WaitExten(2);
        &pngnpbx-abc-clu(42,Or Floor Number ?);
        Background(or&ha/floor&number);
        WaitExten(1);
        &pngnpbx-abc-clu(777,Or Room Number ?);
        Background(or&ha/room);
        WaitExten(1);
        &pngnpbx-abc-clu(2,Or Building Number ?);
        Background(or&otherwise&number);
        WaitExten(2);
        &pngnpbx-abc-clu(0,Elev/Dpth/Flr/Rm/Bldg ?);
        Background(please-enter-your);
        Background(altitude&or);
        Background(ha/room&or);
        Background(ha/floor&number&or);
        Background(otherwise&number);
        WaitExten(10);
        Hangup();
    }

    // positives
    _X*XXX#! => jump ${EXTEN},gooduser;
    _XX*XXX#! => jump ${EXTEN},gooduser;
    _XXX*XXX#! => jump ${EXTEN},gooduser;
    _X*XXXX#! => jump ${EXTEN},gooduser;
    _XX*XXXX#! => jump ${EXTEN},gooduser;
    _XXX*XXXX#! => jump ${EXTEN},gooduser;
    _X*XXXXX#! => jump ${EXTEN},gooduser;
    _XX*XXXXX#! => jump ${EXTEN},gooduser;
    _XXX*XXXXX#! => jump ${EXTEN},gooduser;
    _X*XXX => jump ${EXTEN}#;
    _XX*XXX => jump ${EXTEN}#;
    _XXX*XXX => jump ${EXTEN}#;
    _X*XXXX => jump ${EXTEN}#;
    _XX*XXXX => jump ${EXTEN}#;
    _XXX*XXXX => jump ${EXTEN}#;
    _X*XXXXX => jump ${EXTEN}#;
    _XX*XXXXX => jump ${EXTEN}#;
    _XXX*XXXXX => jump ${EXTEN}#;
    // negatives (leading zero means minus)
    _0X*XXX#! => jump ${EXTEN},gooduser;
    _0XX*XXX#! => jump ${EXTEN},gooduser;
    _0XXX*XXX#! => jump ${EXTEN},gooduser;
    _0X*XXXX#! => jump ${EXTEN},gooduser;
    _0XX*XXXX#! => jump ${EXTEN},gooduser;
    _0XXX*XXXX#! => jump ${EXTEN},gooduser;
    _0X*XXXXX#! => jump ${EXTEN},gooduser;
    _0XX*XXXXX#! => jump ${EXTEN},gooduser;
    _0XXX*XXXXX#! => jump ${EXTEN},gooduser;
    _0X*XXX => jump ${EXTEN}#;
    _0XX*XXX => jump ${EXTEN}#;
    _0XXX*XXX => jump ${EXTEN}#;
    _0X*XXXX => jump ${EXTEN}#;
    _0XX*XXXX => jump ${EXTEN}#;
    _0XXX*XXXX => jump ${EXTEN}#;
    _0X*XXXXX => jump ${EXTEN}#;
    _0XX*XXXXX => jump ${EXTEN}#;
    _0XXX*XXXXX => jump ${EXTEN}#;
    // above ground
    _X#! => jump ${EXTEN},gooduser;
    _XX#! => jump ${EXTEN},gooduser;
    _XXX#! => jump ${EXTEN},gooduser;
    _XXXX#! => jump ${EXTEN},gooduser;
    _XXXXX#! => jump ${EXTEN},gooduser;
    _XXXXXX#! => jump ${EXTEN},gooduser;
    _X => jump ${EXTEN}#;
    _XX => jump ${EXTEN}#;
    _XXX => jump ${EXTEN}#;
    _XXXX => jump ${EXTEN}#;
    _XXXXX => jump ${EXTEN}#;
    _XXXXXX => jump ${EXTEN}#;
    // under ground
    _0X#! => jump ${EXTEN},gooduser;
    _0XX#! => jump ${EXTEN},gooduser;
    _0XXX#! => jump ${EXTEN},gooduser;
    _0XXXX#! => jump ${EXTEN},gooduser;
    _0XXXXX#! => jump ${EXTEN},gooduser;
    _0XXXXXX#! => jump ${EXTEN},gooduser;
    _0X => jump ${EXTEN}#;
    _0XX => jump ${EXTEN}#;
    _0XXX => jump ${EXTEN}#;
    _0XXXX => jump ${EXTEN}#;
    _0XXXXX => jump ${EXTEN}#;
    _0XXXXXX => jump ${EXTEN}#;
    // units for depth and elevation
    // 1 - feet
    // 2 - meters
    // 3 - floor number
    // 4 - room number
    // 5 - building/other number
    // TODO: room/floor/building LETTERS
    _[12345]#! => jump ${EXTEN},gooduser;
    _[12345] => jump ${EXTEN}#;
    // set to 0 if just hash
    _#! => jump 0#;
    // CLIPS code - 6 digit suffix
    _**! => {
        ucli0=;
        ucli=;
        &pngnpbx-abc-clu(123456,CLIPS Code ? eg.);
        Read(ucli0,letters/c&letters/l&letters/i&letters/p&letters/s,6,,,3);
        Set(ucli=${FILTER(0-9,${ucli0})});
        // TODO: check if in allowed list of CLIPS codes
        //&pngnpbx-abc-check-clips();
        Set(scli=${ucli});
        &pngnpbx-abc-clu(${scli},CLIPS Code);
        Background(auth-thankyou);
        WaitExten(2);
        goto s,uni;
    }
    // the GPS Plus Codes entry section
    _* => jump ${EXTEN}#;
    _*#! => {
        uplc=;
        j=;
        k=;
        &pngnpbx-abc-clu(85FQP2Q6*7F,Plus Code ? eg.);
        // assumes 11 digit global code
        // available characters 23456789CFGHJMPQRVWX
        Playback(letters/plus&encode);
        // TODO: while loops may be buggy in AEL...
        // maybe make this into a HASH...
        while( ${LEN(${uplc})} < 11 ) {
            Read(k,silence/1,1,,,1);
            if( ${LEN(${k})} > 0 ) {
                if( ${k} == 0 ) {        // 0
                    NoOp();
                } else if( ${k} == 1 ) { // 1
                    NoOp();
                } else if( ${k} == 2 ) { // 2-C
                    if( ${j} == 2 ) {
                        Set(k=C);
                    }
                } else if( ${k} == 3 ) { // 3-F
                    if( ${j} == 3 ) {
                        Set(k=F);
                    }
                } else if( ${k} == 4 ) { // 4-G-H
                    if( ${j} == 4 ) {
                        Set(k=G);
                    } else if( ${j} == G ) {
                        Set(k=H);
                    }
                } else if( ${k} == 5 ) { // 5-J
                    if( ${j} == 5 ) {
                        Set(k=J);
                    }
                } else if( ${k} == 6 ) { // 6-M
                    if( ${j} == 6 ) {
                        Set(k=M);
                    }
                } else if( ${k} == 7 ) { // 7-P-Q-R
                    if( ${j} == 7 ) {
                        Set(k=P);
                    } else if( ${j} == P ) {
                        Set(k=Q);
                    } else if( ${j} == Q ) {
                        Set(k=R);
                    }
                } else if( ${k} == 8 ) { // 8-V
                    if( ${j} == 8 ) {
                        Set(k=V);
                    }
                } else if( ${k} == 9 ) { // 9-W-X
                    if( ${j} == 9 ) {
                        Set(k=W);
                    } else if( ${j} == W ) {
                        Set(k=X);
                    }
                } else {
                    // ignored key
                    Set(k=);
                }
                if( ${LEN(${k})} > 0 ) {
                    Set(j=${k});
                    &pngnpbx-abc-clu(${k},Code ${uplc});
                }
            } else {
                if( ${LEN(${j})} > 0 ) {
                    Set(uplc=${uplc}${j});
                    if( ${LEN(${uplc})} == 8 ) {
                        Set(uplc=${uplc}+);
                    }
                    &pngnpbx-abc-clu(${j},Code ${uplc});
                    Set(j=);
                }
            }
        }
        Set(splc=${uplc});
        &pngnpbx-abc-clu(${splc},Code ${splc});
        Background(auth-thankyou);
        WaitExten(2);
        goto s,uni;
    }

    // any hash terminated string
    _X.#! => {
        jump i;
        Congestion(10); // srsly no funny business users
        HANGUP(); // SRSLY
    gooduser:
        if( ${LEN(${splc})} == 0 && ${LEN(${slat})} == 0 ) {
            Set(ulat=${EXTEN:0:-1});
            Set(ulats=${FILTER(*0-9,${ulat})});
            if( "x${ulats:0:1}" == "x0" ) {
                Set(ulats=-${ulats:1});
            }
            Set(ulatd=${STRREPLACE(ulats,*,.)});
            if( ${LEN(${CUT(ulatd,.,2)})} < 3 ) {
                &pngnpbx-abc-clu(${ulats},BAD Latitude ${ulatd});
                Background(confbridge-invalid);
                &pngnpbx-abc-clu(39*555,Use 3-5 digit mantissa);
                Background(minimum&digits);
                SayDigits(3);
                Background(maximum&digits);
                &pngnpbx-abc-clu(39*55555,Use 3-5 digit mantissa);
                SayDigits(5);
                WaitExten(4);
                goto s,lat;
            } else if( ${ulatd} > 90 || ${ulatd} < -90 ) {
                &pngnpbx-abc-clu(${ulats},BAD Latitude ${ulatd});
                Background(confbridge-invalid);
                goto s,lat;
            } else {
                Set(slat=${ulatd});
                &pngnpbx-abc-clu(${ulats},GOOD Latitude ${slat});
                Background(auth-thankyou);
                WaitExten(2);
                goto s,lng;
            }
        }
        if( ${LEN(${splc})} == 0 && ${LEN(${slng})} == 0 ) {
            Set(ulng=${EXTEN:0:-1});
            Set(ulngs=${FILTER(*0-9,${ulng})});
            if( "x${ulngs:0:1}" == "x0" ) {
                Set(ulngs=-${ulngs:1});
            }
            Set(ulngd=${STRREPLACE(ulngs,*,.)});
            if( ${LEN(${CUT(ulngd,.,2)})} < 3 ) {
                &pngnpbx-abc-clu(${ulngs},BAD Longitude ${ulngd});
                Background(confbridge-invalid);
                Background(minimum&digits);
                &pngnpbx-abc-clu(0104*555,Use 3-5 digit mantissa);
                SayDigits(3);
                Background(maximum&digits);
                SayDigits(5);
                &pngnpbx-abc-clu(0104*55555,Use 3-5 digit mantissa);
                WaitExten(4);
                goto s,lng;
            } else if( ${ulngd} > 180 || ${ulngd} < -180 ) {
                &pngnpbx-abc-clu(${ulngs},BAD Longitude ${ulngd});
                Background(confbridge-invalid);
                goto s,lng;
            } else {
                Set(slng=${ulngd});
                &pngnpbx-abc-clu(${ulngs},GOOD Longitude ${slng});
                Background(auth-thankyou);
                WaitExten(2);
                goto s,uni;
            }
        }
        if( ${LEN(${suni})} == 0 ) {
            Set(uuni=${EXTEN:0:1});
            Set(uunix=${FILTER(1-5,${uuni})});
            if( ${uunix} == 1 ) {
                Set(suni=feet);
            } else if( ${uunix} == 2 ) {
                Set(suni=meters);
            } else if( ${uunix} == 3 ) {
                Set(suni=floor);
            } else if( ${uunix} == 4 ) {
                Set(suni=room);
            } else if( ${uunix} == 5 ) {
                Set(suni=bldg);
            } else {
                Set(suni=feet); // default
            }
            &pngnpbx-abc-clu(${suni},Your Chosen Units);
            Background(auth-thankyou);
            WaitExten(2);
            goto s,elv;
        }
        if( ${LEN(${selv})} == 0 ) {
            Set(uelv=${EXTEN:0:-1});
            Set(uelvx=${FILTER(0-9,${uelv})});
            if( "x${uelvx:0:1}" == "x0" ) {
                Set(uelvx=-${uelvx:1});
            }
            Set(selv=${STRREPLACE(uelvx,*,.)});
            &pngnpbx-abc-clu(${selv}${suni},Elev/Dpth/Flr/Rm/Bldg);
            &pngnpbx-abc-marco(${abcid},${splc},${slat},${slng},${selv},${suni});
            Background(auth-thankyou);
            WaitExten(2);
            goto confirmation,1;
        }
    }

    confirmation => {
        Set(SAY_DTMF_INTERRUPT=false);
        &pngnpbx-abc-clu(123*ABC,GPS Confirmation);
        &pngnpbx-abc-polo(${abcid});
        &pngnpbx-abc-tones();
        Playback(confirm-number-is); // not wearing pants
        // TODO maybe merge with other tts
        Set(xlat=${STRREPLACE(abcdlat,.,*)});
        Set(xlng=${STRREPLACE(abcdlng,.,*)});

        if( ${LEN(${abcdplc})} > 0 ) {
            &pngnpbx-abc-clu(${abcduni}${abcdelv},${abcdplc});
            SayAlpha(${abcdplc});
        } else {
            &pngnpbx-abc-clu(${abcduni}${abcdelv},${abcdlat} ${abcdlng});
            SayNumber(${CUT(abcdlat,.,1)});
            Playback(letters/dot);
            SayDigits(${CUT(abcdlat,.,2)});
            Playback(by);
            SayNumber(${CUT(abcdlng,.,1)});
            Playback(letters/dot);
            SayDigits(${CUT(abcdlng,.,2)});
        }

        Wait(1);
        SayAlpha(${abcduni});
        SayNumber(${abcdelv});
        Wait(1);
        &pngnpbx-abc-clu(1,Thanks);
        &pngnpbx-abc-tones();
        Wait(.1);
        &pngnpbx-abc-clu(12,Thanks for);
        &pngnpbx-abc-tones();
        Wait(.1);
        &pngnpbx-abc-clu(123,Thanks for using);
        &pngnpbx-abc-tones();
        Wait(.1);
        &pngnpbx-abc-clu(123*222,Thanks for using ABC!);
        &pngnpbx-abc-tones();
        Wait(1);
        &pngnpbx-abc-clu(123*ABC,As easy as 123*ABC);
        Wait(2);
        Playback(silence/1);
        if( ${LEN(${abcdplc})} > 0 ) {
            &pngnpbx-abc-clu(${abcduni}${abcdelv},${abcdplc});
        } else {
            &pngnpbx-abc-clu(${abcduni}${abcdelv},${abcdlat} ${abcdlng});
        }
        &pngnpbx-abc-song();
        Playback(silence/1);
        Wait(30);
        Playback(vm-goodbye);
        Hangup();
    }

    t => jump i;
    i => {
        &pngnpbx-abc-clu(,What ?);
        Playback(sorry-youre-having-problems);
        if( ${LEN(${splc})} == 0 ) {
            if( ${LEN(${slat})} == 0 ) {
                Playback(pls-try-again);
                jump s,plc;
            }
            if( ${LEN(${slng})} == 0 ) {
                Playback(pls-try-again);
                jump s,lng;
            }
        }
        if( ${LEN(${suni})} == 0 ) {
            Playback(pls-try-again);
            jump s,uni;
        }
        if( ${LEN(${selv})} == 0 ) {
            Playback(pls-try-again);
            jump s,elv;
        }
        Playback(please-hang-up-and-try-again);
        Hangup();
    }

}; // end context pngnpbx-abc-ivr-diy-gps

/* PUBLIC */
context pngnpbx-abc-ivr-diy-sa {
    // TODO: Collect street address, store encrypted like GPS
}

/* PUBLIC */
context pngnpbx-abc-ivr-diy-ai {
    // TODO: Collect additional information, store encrypted like GPS
}

/*  PUBLIC   - ivr-diy-friends
 */
context pngnpbx-abc-ivr-diy-friends {
    // TODO: Allow users to pick their own (additional/replacement) Friends
}

/*  PUBLIC - demo

    The "demo" context allows trying out the system more quickly.
    It is included from the FreePBX mini-HOWTO near the top of this file.

    123ABC      - allows user to program their own GPS.
    123*ABC     - allows user to program their own GPS.
    123*222*    - checks status of address, sends to IVR if change needed
    123*222*555 - ext.-by-ext. status dial check for IT - change 555 as needed
                - provides method to bridge to callers that need to change
                - so IT can provide training on the call
                - then when IT hangs up, caller is xfer'd to the IVR
    123*222X*   - multiple tests - 0-9 - change X as needed
    123*222XX*  - multiple tests - 10-11 - change X as needed
    222328      - ABC Door Bell Video
    222486      - ABC Insta Teams Mode

 */
context pngnpbx-abc-demo {
    123222 => goto 123*222,1; // some phone dial plans bork on the star
    123*222 => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Self-Set GPS);
        // programs dynamic GPS
        // be sure to initialize the key first (dial 123*2222* - see below)
        Answer();
        Set(cidnum=${FILTER(0-9a-zA-Z,${CALLERID(num)})});
        &pngnpbx-abc-account(${cidnum});
        &pngnpbx-abc-tones();
        goto pngnpbx-abc-ivr-diy-gps,s,1;
    }
    123*222* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Self-Check GPS);
        // confirm dynamic GPS
        Answer();
        Set(cidnum=${FILTER(0-9a-zA-Z,${CALLERID(num)})});
        &pngnpbx-abc-account(${cidnum});
        &pngnpbx-abc-tones();
        // did they update GPS in the past year ?
        &pngnpbx-abc-check-marco-polo-days(${cidnum},365);
        if( "x${GOSUB_RETVAL}" == "xneedschange" ) {
            goto pngnpbx-abc-ivr-diy-gps,s,1;
        } else {
            goto pngnpbx-abc-ivr-diy-gps,confirmation,1;
        }
    }
    _123*222*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - IT Check GPS);
        Answer();
        Set(tech=${CHANNEL(channeltype)});
        Set(ext=${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        // did they update GPS in the past year ?
        &pngnpbx-abc-check-marco-polo-days(${ext},365);
        Set(needschange=${GOSUB_RETVAL});
        &pngnpbx-abc-tones();
        if( "x${needschange}" == "xneedschange" ) {
            // Calls the user to tell them to update.
            &pngnpbx-abc-clu(${ext},User);
            SayAlpha(gps);
            &pngnpbx-abc-clu(${ext},User needs);
            Playback(is-not-set);
            &pngnpbx-abc-clu(${ext},User needs update!);
            SayAlpha(ok);
            Wait(1);
            Playback(please-hold-minion-connect);
            &pngnpbx-abc-clu(${ext},Tell them 123*ABC);
            Wait(1);
            // IT can hang up, and the callee will be redirected to the IVR
            Dial(${tech}/${ext},60,iIF(pngnpbx-abc-user-training-mode^${ext}^1));
        } else {
            &pngnpbx-abc-clu(${ext},User GPS is OKAY!);
            SayAlpha(gps);
            Playback(is);
            SayAlpha(ok);
        }
    }
    123*2220* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #0);
        // TODO: dynamic DID registration (see Example #3 top of file)
        NoOp();
    }
    123*2221* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #1);
        // TODO: configure subnet caller ID numbers (see Example #7)
        // currently it is a manual AstDB manipulation process
        NoOp();
    }
    123*2222* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - GenKey);
        Answer();
        Set(cidnum=${FILTER(0-9a-zA-Z,${CALLERID(num)})});
        &pngnpbx-abc-account(${cidnum});
        &pngnpbx-abc-tones();
        // must gen key before dynamic GPS will work
        &pngnpbx-abc-key-gen("");
        //Playback(auth-thankyou);
        //Playback(telephone-in-your-pocket); // not wearing pants
        Playback(dial-here-often); // not wearing pants
    }
    _123*2222*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #2);
        Log(VERBOSE,Simple Mode Test with GPS and Two Friends);
        Set(gpsurl=https://abc.penguinpbx.com/loc/);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(friendAlice=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(friendBob=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest3);
        Set(pathringtime=120);
        &pngnpbx-abc-init(${abcshrtname},,3600,,announce,,,);
        &pngnpbx-abc-path(1,${pathringtime},${path});
        &pngnpbx-abc-gps(,,,,,${gpsurl});
        &pngnpbx-abc-remote(${defaultcallback},static);
        &pngnpbx-abc-friend(1,${friendAlice});
        &pngnpbx-abc-friend(2,${friendBob});
        &pngnpbx-abc-howdy-yall();
    }
    _123*2223*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #3);
        Log(VERBOSE,Simple Mode Test with GPS and Two Friends on a Mountain);
        Set(gpsurl=https://abc.penguinpbx.com/loc/);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(friendAlice=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(friendBob=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest3);
        Set(pathringtime=120);
        &pngnpbx-abc-simple(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        &pngnpbx-abc-gps(,39.588,-105.644,4350,meters,${gpsurl});
        &pngnpbx-abc-sa(Mount Evans Ridge,Idaho Springs,CO,80452);
        &pngnpbx-abc-ai(Floor 42);
        &pngnpbx-abc-remote(${defaultcallback},static);
        &pngnpbx-abc-friend(1,${friendAlice});
        &pngnpbx-abc-friend(2,${friendBob});
        &pngnpbx-abc-howdy-yall();
    }
    _123*2224*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #4);
        Log(VERBOSE,Tin Can Mode Test); // see also Example #4 above
        Set(gpsurl=https://abc.penguinpbx.com/loc/);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(friendAlice=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(friendBob=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest4);
        Set(pathringtime=120);
        &pngnpbx-abc-tincan(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        &pngnpbx-abc-gps(,39.588,-105.644,42,floor,${gpsurl});
        &pngnpbx-abc-sa(Mount Evans Ridge,Idaho Springs,CO,80452);
        &pngnpbx-abc-ai(Floor 42);
        &pngnpbx-abc-remote(${defaultcallback},static);
        &pngnpbx-abc-friend(1,${friendAlice});
        &pngnpbx-abc-friend(2,${friendBob});
        &pngnpbx-abc-howdy-yall();
    }
    _123*2225*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #5);
        Log(VERBOSE,Simple Mode Test with Voicemail notification);
        Set(gpsurl=https://abc.penguinpbx.com/loc/);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(friend=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(vmbox=${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})}@default);
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest5);
        Set(pathringtime=120);
        &pngnpbx-abc-simple(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        // dynamic GPS from AstDB
        &pngnpbx-abc-gps(,,,,,${gpsurl});
        &pngnpbx-abc-remote(${defaultcallback},static);
        &pngnpbx-abc-friend(1,${friend});
        // record first 5 seconds of call into VoiceMail alert
        // See also Example #5 above and contents of voicemail.conf
        // (the 5 seconds must be greater than minsecs in voicemail.conf)
        &pngnpbx-abc-vmail(${vmbox},5,0);
        &pngnpbx-abc-howdy-yall();
    }
    _123*2226*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #6);
        Log(VERBOSE,Tin Can Mode with no Friends just Paladins);
        Set(gpsurl=https://abc.penguinpbx.com/loc/);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(palOliver=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(palOrlando=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest6);
        Set(pathringtime=120);
        &pngnpbx-abc-tincan(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        // dynamic GPS from AstDB
        &pngnpbx-abc-gps(,,,,,${gpsurl});
        &pngnpbx-abc-remote(${defaultcallback},static);
        // See Example #6 at top of file
        &pngnpbx-abc-paladin(1,${palOliver},nonnosy);
        &pngnpbx-abc-paladin(2,${palOrlando},nonnosy);
        &pngnpbx-abc-howdy-yall();
    }
    _123*2227*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #7);
        Log(VERBOSE,Tin Can Mode with Paladins and Subnet based Caller ID);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(palOliver=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(palOrlando=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest7);
        Set(pathringtime=120);
        &pngnpbx-abc-tincan(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        // See Example #7 at top of file
        &pngnpbx-abc-remote(${defaultcallback},subnet);
        &pngnpbx-abc-paladin(1,${palOliver},nosy);
        &pngnpbx-abc-paladin(2,${palOrlando},nosy);
        &pngnpbx-abc-howdy-yall();
    }
    _123*2228*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #8);
        Log(VERBOSE,Tin Can Mode with two Trolls);
        Set(tech=${CHANNEL(channeltype)});
        Set(path=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,3)})});
        Set(trollCharlie=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,4)})});
        Set(trollDwight=${tech}/${FILTER(0-9a-zA-Z,${CUT(EXTEN,*,5)})});
        Set(defaultcallback=7203242729);
        Set(abcshrtname=abctest8);
        Set(pathringtime=120);
        &pngnpbx-abc-tincan(${abcshrtname});
        &pngnpbx-abc-path(1,${pathringtime},${path});
        &pngnpbx-abc-remote(${defaultcallback},subnet);
        // See Example #8 at top of file
        &pngnpbx-abc-troll(1,${trollCharlie},nosy);
        &pngnpbx-abc-troll(2,${trollDwight},);
        &pngnpbx-abc-howdy-yall();
    }
    _123*2229*. => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #9);
        // TODO
        // See Example #9 at top of file
    }
    123*22210* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #10);
        &pngnpbx-abc-simple(abcdemo10);
        &pngnpbx-abc-gps(,,,,,); // gets GPS, if any
        &pngnpbx-abc-path(1,30,PJSIP/ABCremoteend);
        &pngnpbx-abc-remote(7203242729,subnet);
        &pngnpbx-abc-friend(1,PJSIP/ABCfriend1);
        &pngnpbx-abc-troll(1,PJSIP/ABCtroll1,nosy);
        &pngnpbx-abc-paladin(1,PJSIP/ABCpaladin1,nosy);
        &pngnpbx-abc-howdy-yall();
    }
    123*22211* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #11);
        &pngnpbx-abc-simple(abcdemo11);
        &pngnpbx-abc-gps(,,,,,); // gets GPS from AstDB, if any
        &pngnpbx-abc-remote(ABCtheOG,static);
        &pngnpbx-abc-friend(1,PJSIP/ABCfriend1);
        &pngnpbx-abc-friend(2,PJSIP/ABCfriend2);
        // records first five minutes of the call as the voicemail
        // (might be less than five minutes - depends on voicemail.conf)
        &pngnpbx-abc-vmail(ABCfriend1&ABCfriend2,300,0);
        // these zero length voicemails, in separate group 1 (3rd param)
        &pngnpbx-abc-vmail(ABCtroll1&ABCtroll2,0,1);
        &pngnpbx-abc-howdy-yall();
    }
    123*22212* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #12);
        &pngnpbx-abc-tincan(abcdemo12);
        &pngnpbx-abc-gps(,,,,,); // gets GPS from AstDB, if any
        &pngnpbx-abc-remote(8337646729,static);
        &pngnpbx-abc-path(1,60,PJSIP/7203242729@MYTRUNK);
        &pngnpbx-abc-friend(1,PJSIP/ABCfriend1);
        &pngnpbx-abc-friend(2,PJSIP/ABCfriend2);
        // records first five minutes of the call as the voicemail
        // (might be less than five minutes - depends on voicemail.conf)
        &pngnpbx-abc-vmail(ABCfriend1&ABCfriend2,300,0);
        // these zero length voicemails, in separate group 1 (3rd param)
        &pngnpbx-abc-vmail(ABCtroll1&ABCtroll2,0,1);
        &pngnpbx-abc-howdy-yall();
    }
    123*22213* => {
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - Test #13);
        Dial(PJSIP/7203242729@MYTRUNK&Local/7203242729@pngnpbx-abc-parallel-vm-notify,,r);
    }
    // ABC Door Bell Video (ABCDBV - 222328)
    222328 => {
        Wait(1);
        Proceeding();
        Wait(1);
        Answer();
        Wait(1);
        &pngnpbx-abc-doorbell(abcdbv);
        &pngnpbx-abc-friend(1,PJSIP/ABCfriend1);
        &pngnpbx-abc-howdy-yall();
    }
    // ABC Insta Teams Mode (ABCITM - 222486)
    222486 => goto pngnpbx-abc-itm,s,1;
}; // end context pngnpbx-abc-demo

/*
 * Context: pngnpbx-abc-from-telco
 *
 * You might set this as your incoming context in all pertinent
 * configuration files eg. pjsip_wizard.conf, sip.conf, iax.conf,
 * chan_dahdi.conf, etc.
 *
 */
context pngnpbx-abc-from-telco {
    _XXX => goto pngnpbx-abc-itm,s,1; // 3 digits
    _XXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXXXXXX => goto pngnpbx-abc-itm,s,1;
    _XXXXXXXXXXXXXXX => goto pngnpbx-abc-itm,s,1; // 15 digits
    _+X. => jump ${EXTEN:1},1;
    i => Congestion(2);
}

/*
 * Context: pngnppbx-abc-itm
 *
 * Insta Teams Mode (ITM)
 *
 * Because remembering every conf call when under quar-in-carceration
 * is a PITA, and this way lets the owner of the room run the show
 * from just their telephone on the good ol' PSTN baby.
 *
 * "I'll give y'all a call tomorrow morning between 10 and 11."
 *
 */
context pngnpbx-abc-itm {
    i => Hangup();
    a => {
        // TODO: maybe allow blocking on unknown caller ID numbers
        &pngnpbx-abc-clu(Enter-Password,ABC INSTA TEAM BOSS);
        VMAuthenticate(${abcvmuser}@${abcfg_itm_vm});
        goto pngnpbx-abc-itm-boss,s,1;
    }
    s => {
        //Set(AGC(tx)=on);
        Log(VERBOSE,Always Be Conferencing - PenguinPBX.com - INSTA TEAMS MODE);
        Log(DEBUG,Added this because of governments over-reacting to illness.);
        Log(DEBUG,Their cure is worse than the disease. Research: TWISATWINS.);
        Log(DEBUG,Save lives and livelihoods. End Mass Quar-In-Carceration.);
        Log(DEBUG,Please vote for candidates that will defend liberty ALWAYS.);
        Log(DEBUG,Protest aside...);
        Log(DEBUG,Hope ABC WFH ITM helps you keep in phone touch!);
        Set(abcfg_gen_dm=${AST_CONFIG(abc.conf,general,demomode)});
        Set(abcfg_itm_cm=${AST_CONFIG(abc.conf,itm,conferenceminutes)});
        Set(abcfg_itm_mm=${AST_CONFIG(abc.conf,itm,monthlyminutes)});
        Set(abcfg_itm_vm=${AST_CONFIG(abc.conf,itm,vmcontext)});
        Set(abcfg_itm_ns=${AST_CONFIG(abc.conf,itm,numberstyle)});
        if( ${LEN(${abcfg_gen_dm})} == 0 ) {
            Set(abcfg_gen_dm=nope);
        }
        if( ${LEN(${abcfg_itm_cm})} == 0 ) {
            Set(abcfg_itm_cm=120);
        }
        if( ${LEN(${abcfg_itm_mm})} == 0 ) {
            Set(abcfg_itm_mm=600);
        }
        if( ${LEN(${abcfg_itm_vm})} == 0 ) {
            Set(abcfg_itm_vm=default);
        }
        if( ${LEN(${abcfg_itm_ns})} == 0 ) {
            Set(abcfg_itm_ns=international);
        }
        if( ${LEN(${abcdnid})} == 0 ) {
            Set(abcdnid=${CALLERID(DNID)});
        }
        if( ${VM_INFO(${abcdnid}@${abcfg_itm_vm},exists)} ) {
            Set(abcvmuser=${abcdnid});
        }
        Set(TIMEOUT(absolute)=${MATH(${abcfg_itm_cm}*60,int)});
        Wait(.1);
        Progress();
        Wait(.1);
        Answer();
        Wait(.1);
        &pngnpbx-abc-clu(${abcdnid},ABC INSTA MODE);
        &pngnpbx-abc-tones();
        Set(frndtel=); // current active friend when checking/adding/removing
        if( "x${abcdnid}" != "x${abcvmuser}" ) {
            Read(uvm,please-enter-your&access-code&vm-then-pound,20,,2,3);
            Set(abcvmuser=${FILTER(0-9a-zA-Z,${uvm})});
        }
        if( ${LEN(${abcvmuser})} == 0 ) {
            Playback(goodbye);
            Hangup();
        }
        // Users randomly dialing the DID end up in voicemail.
        // Need to press '*' during the greeting to get into boss mode.
        VoiceMail(${abcvmuser}@${abcfg_itm_vm});
    }
}

context pngnpbx-abc-itm-boss {
    s => {
        &pngnpbx-abc-account(${abcvmuser});
    yurtchoice:
        &pngnpbx-abc-clu(1-9,Enter ABC Yurt #);
        Set(ogcid=${FILTER(0-9,${VM_INFO(${abcvmuser}@${abcfg_itm_vm},fullname)})});
        // is this their first time ?  if so create yurt conference 1 for them
        Set(notnube=${DB_EXISTS(pngnpbx/abc/insta/${abcvmuser}/yurt/1/friend/1)});
        Set(currym=${STRFTIME(,,%Y%m)});
        if( ! ${notnube} ) {
            Set(scnf=1);
            &pngnpbx-abc-teamcalc(${abcid},${abcfg_itm_mm});
            Set(DB(pngnpbx/abc/insta/${abcvmuser}/minutesmonth)=${currym});
        } else {
            Read(ucnf,please-enter-your&conference&speed-dial&number,1,,2,2);
            Set(scnf=${FILTER(1-9,${ucnf})});
            Set(lastym=${DB(pngnpbx/abc/insta/${abcvmuser}/minutesmonth)});
            if( "x${currym}" != "x${lastym}" ) {
                &pngnpbx-abc-teamcalc(${abcid},${abcfg_itm_mm});
                Set(DB(pngnpbx/abc/insta/${abcvmuser}/minutesmonth)=${currym});
            }
        }
        if( ${LEN(${scnf})} == 0 ) {
            Set(scnf=1);
        }
        Set(cb=pngnpbx-abc-yurt-${abcvmuser});
        if( ${CONFBRIDGE_INFO(parties,${cb})} > 0 ) {
            // prevent more than one Yurt active at a time
            &pngnpbx-abc-clu(error-good-bye,Other Yurt is Active);
            Log(WARNING,party time ${CONFBRIDGE_INFO(parties,${cb})});
            Playback(simul-call-limit-reached&please-try-again-later&goodbye);
            Hangup();
        }
        Set(minutesleft=${DB(pngnpbx/abc/insta/${abcvmuser}/minutesleft)});
        Set(imdbk=pngnpbx/abc/insta/${abcvmuser}/yurt/${scnf});
    mainmenu:
        Set(mmrepeats=3);
    mainmenurepeat:
        Set(frndtel=);
        Set(SAY_DTMF_INTERRUPT=true);
        &pngnpbx-abc-clu(Yurt-${scnf},Yurt Main Menu);
        &pngnpbx-abc-tones();
        Background(conference);
        SayAlpha(${scnf});
        &pngnpbx-abc-clu(Press1,Start Yurt ${scnf} ?);
        Background(speed-dial&users&ha/bright&now&press-1);
        &pngnpbx-abc-clu(Press2,Account Balance ?);
        Background(for&accounting&press-2);
        &pngnpbx-abc-clu(Press3,VMail/Change Pass ?);
        Background(for&voice-mail-system&and&vm-password&changing&press-3);
        &pngnpbx-abc-clu(Press4,List Users ?);
        Background(for-a-list-of&users&telephone-number&press-4);
        &pngnpbx-abc-clu(Press5,Add User ?);
        Background(vm-INBOX&user&telephone-number&press-5);
        &pngnpbx-abc-clu(Press6,Delete User ?);
        Background(digits/2&removed&user&telephone-number&press-6);
        &pngnpbx-abc-clu(List4-Add5-Del6,Start1 Acct2 VM3);
        Background(to-enter-a-diff-number&speed-dial&number&press-pound);
        WaitExten(10);
        if( ${DEC(mmrepeats)} > 0 ) {
            jump s,mainmenurepeat;
        }
        Hangup();
    }
    o => jump s,mainmenu;
    a => jump s,mainmenu;
    i => jump s,mainmenu;
    # => jump s,yurtchoice;
    1 => goto pngnpbx-abc-itm-start,s,1;
    2 => goto pngnpbx-abc-itm-accounting,s,1;
    3 => {
        &pngnpbx-abc-clu(PressPoundToExit,Voice Mail System);
        VoiceMailMain(${abcvmuser}@${abcfg_itm_vm},s);
        jump s,mainmenu;
    }
    4 => goto pngnpbx-abc-itm-list,s,1;
    5 => goto pngnpbx-abc-itm-add,s,1;
    6 => goto pngnpbx-abc-itm-del,s,1;
}

context pngnpbx-abc-itm-list {
    _[123456#]! => goto pngnpbx-abc-itm-boss,${EXTEN},1;
    i => goto pngnpbx-abc-itm-boss,s,mainmenu;
    s => {
        found=0;
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            // TODO: make into separate macro
            if( "x${abcfg_itm_ns}" == "xus" ) {
                if( ${LEN(${frndtel})} == 11 ) {
                    found=1;
                    &pngnpbx-abc-clu(${frndtel},Yurt ${scnf} Spot ${i});
                    Background(position);
                    SayAlpha(${i});
                    Background(telephone-number);
                    SayAlpha(${frndtel:0:1});
                    WaitExten(.2);
                    SayAlpha(${frndtel:1:4});
                    WaitExten(.2);
                    SayAlpha(${frndtel:4:7});
                    WaitExten(.2);
                    SayAlpha(${frndtel:7});
                } else if( ${LEN(${frndtel})} == 10 ) {
                    found=1;
                    &pngnpbx-abc-clu(${frndtel},Yurt ${scnf} Spot ${i});
                    Background(position);
                    SayAlpha(${i});
                    Background(telephone-number);
                    SayAlpha(${frndtel:0:3});
                    WaitExten(.2);
                    SayAlpha(${frndtel:3:6});
                    WaitExten(.2);
                    SayAlpha(${frndtel:6});
                } else if( ${LEN(${frndtel})} > 0 ) {
                    found=1;
                    &pngnpbx-abc-clu(${frndtel},Yurt ${scnf} Spot ${i});
                    Background(position);
                    SayAlpha(${i});
                    Background(telephone-number);
                    SayAlpha(${frndtel});
                }
            } else {
                if( ${LEN(${frndtel})} > 0 ) {
                    found=1;
                    &pngnpbx-abc-clu(${frndtel},Yurt ${scnf} Spot ${i});
                    Background(position);
                    SayAlpha(${i});
                    Background(telephone-number);
                    // TODO: say this slower with some slight pauses
                    SayAlpha(${frndtel});
                }
            }
        }
        if( "x${found}" != "x1" ) {
            &pngnpbx-abc-clu(0,Yurt ${scnf} Empty);
            Background(vm-no&users&in-the&list&pls-try-again);
        }
        WaitExten(2);
        goto pngnpbx-abc-itm-boss,s,mainmenu;
    }
}

context pngnpbx-abc-itm-add {
    _[123456#]! => goto pngnpbx-abc-itm-boss,${EXTEN},1;
    i => goto pngnpbx-abc-itm-boss,s,mainmenu;
    s => {
        Set(prmpt=please-enter-your&vm-INBOX&user&telephone-number&vm-then-pound);
        &pngnpbx-abc-clu(Phone-number,Add to Yurt ${scnf});
        Read(unew,${prmpt},20,,2,5);
        Set(snew=${FILTER(0-9,${unew})});
        if( ${LEN(${snew})} == 0 ) {
            &pngnpbx-abc-clu(bad-phone-number,Oops!);
            Background(sorry_didnt_get);
            WaitExten(2);
            goto pngnpbx-abc-itm-boss,s,mainmenu;
        }
        &pngnpbx-abc-clu(${snew},Yurt ${scnf} adding);
        SayAlpha(${snew});
        Set(added=0);
        Set(frndtel=);
        // prevent duplicate entries
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( ${frndtel} == ${snew} ) {
                &pngnpbx-abc-clu(${snew},Already at Spot ${i});
                Background(was&in-the&list&position);
                SayAlpha(${i});
                Background(please-try-again);
                WaitExten(2);
                goto pngnpbx-abc-itm-boss,s,mainmenu;
            }
        }
        // no dupes, get ready to add it
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( ${LEN(${frndtel})} == 0 ) {
                Set(frndtel=${snew});
                Set(prmpt=is&legal&to-call-this-number&if-correct-press&digits/1);
                &pngnpbx-abc-clu(${snew},Press 1 to add it);
                Read(uok,${prmpt},1,,4,3);
                if( "x${uok}" != "x1" ) {
                    Background(vm-no&number&added);
                } else {
                    Set(DB(${imdbk}/friend/${i})=${snew});
                    Set(added=1);
                    &pngnpbx-abc-clu(${snew},Added at Spot ${i});
                    Background(num-was-successfully&added&letters/at&position);
                    SayAlpha(${i});
                }
                break;
            }
        }
        if( "x${added}" != "x1" ) {
            &pngnpbx-abc-clu(Oops,Yurt ${scnf} Full);
            Background(vm-no&position&available&pls-try-again);
        }
        WaitExten(2);
        goto pngnpbx-abc-itm-boss,s,mainmenu;
    }
}

context pngnpbx-abc-itm-del {
    _[123456#]! => goto pngnpbx-abc-itm-boss,${EXTEN},1;
    i => goto pngnpbx-abc-itm-boss,s,mainmenu;
    s => {
        Set(prmpt=please-enter-your&removed&user&telephone-number&or&position&number&vm-then-pound);
        &pngnpbx-abc-clu(Phone-or-Spot,Delete Phone or Spot);
        Read(uold,${prmpt},20,,2,5);
        Set(sold=${FILTER(0-9,${uold})});
        Set(removed=0);
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( "${sold}" == "${i}" || "${sold}" == "${frndtel}" ) {
                &pngnpbx-abc-clu(Tel-${frndtel},Yurt ${scnf} Spot ${i});
                Set(DB_DELETE(${imdbk}/friend/${i})=ignored);
                Set(removed=1);
                Background(position);
                SayAlpha(${i});
                Background(removed);
                SayAlpha(${sold});
                break;
            }
        }
        if( "x${removed}" != "x1" ) {
            &pngnpbx-abc-clu(Nope-${sold},Yurt ${scnf} NOT Deleting);
            Background(vm-no&telephone-number&available&pls-try-again);
        }
        WaitExten(2);
        goto pngnpbx-abc-itm-boss,s,mainmenu;
    }
}

context pngnpbx-abc-itm-start {
    _[123456#]! => goto pngnpbx-abc-itm-boss,${EXTEN},1;
    * => goto s,roborecbg;
    i => goto pngnpbx-abc-itm-boss,s,mainmenu;
    s => {
        found=0;
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( ${LEN(${frndtel})} > 0 ) {
                Set(f=${INC(found)});
            }
        }
        if( ${found} == 0 ) {
            &pngnpbx-abc-clu(Size-0,Yurt ${scnf} Empty);
            Playback(beeperr&vm-no&users&in-the&list);
            goto pngnpbx-abc-itm-add,s,1;
        }
        Set(ml=${DB(pngnpbx/abc/insta/${abcvmuser}/minutesleft)});
        if( ${ml} <= 0 ) {
            &pngnpbx-abc-clu(0-minutes-left,Need more credit);
            Playback(beeperr&not-enough-credit);
            goto pngnpbx-abc-itm-accounting,s,1;
        }
        &pngnpbx-abc-clu(Yurt-${scnf},Ready to Go ?);
        Background(conf-enteringno&digits/${scnf});
        WaitExten(.500);
        Set(foundplusboss=${MATH(${found}+1)});
        Set(mlperuser=${MATH(${ml}/${foundplusboss},int)});
        &pngnpbx-abc-clu(Yurt-${scnf},Size: ${found} User Friends);
        Background(with);
        SayNumber(${found});
        Background(users&and);
        &pngnpbx-abc-clu(Yurt-${scnf},Minutes per User: ${mlperuser});
        SayNumber(${mlperuser});
        Background(minutes&for&user&connected);
        WaitExten(.500);
    roborecbg:
        &pngnpbx-abc-clu(Yurt-${scnf},Record 30 sec. Robo);
        Background(priv-recordintro&telephone-number&and&your-temp-greeting&then-press-pound);
        Set(recfn=abchowdy-${abcvmuser}.wav);
    roborec:
        Background(beep);
        Record(local/${recfn},2,30,qy);
        if( "${RECORD_STATUS}" == "ERROR" ) {
            Record(custom/${recfn},2,30,qy);
            if( "${RECORD_STATUS}" == "ERROR" ) {
                Record(${recfn},2,30,qy);
            }
        }
        if( ${LEN(${RECORDED_FILE})} == 0 ) {
            &pngnpbx-abc-clu(e5241,Error!);
            Background(an-error-has-occurred);
            SayAlpha(e5241);
            Background(an-error-has-occurred);
            SayAlpha(e5241);
            goto pngnpbx-abc-itm-boss,s,mainmenu;
        }
        Set(recprmpt=beep&${RECORDED_FILE});
        Set(recprmpt=${recprmpt}&to-accept-recording&press-star);
        Set(recprmpt=${recprmpt}&or&to-rerecord-it&press-0);
        &pngnpbx-abc-clu(Rerecord-Press-0,Accept Press *);
        Read(okrobo,${recprmpt},1,,3,3);
        if( "x${okrobo}" == "x0" ) {
            &pngnpbx-abc-clu(Yurt-${scnf},ReRecord 30 sec. Robo);
            goto roborec;
        }
        if( "x${okrobo}" != "x*" ) {
            goto pngnpbx-abc-itm-boss,s,mainmenu;
        }
        &pngnpbx-abc-clu(Yurt-${scnf},About to Dial Friends);
        Background(auth-thankyou&speed-dial&now);
        &pngnpbx-abc-wfh(abciteam-${abcvmuser},10800,${abcvmuser});
        // Each OG can only use one Yurt at a time.
        // Otherwise, there will be conflicts in the robos
        // during any *8 redial attempt to (re)connect Friends.
        Set(DB(pngnpbx/abc/cb/${abcvmuser}/robo)=${RECORDED_FILE});
        Set(DB(pngnpbx/abc/cb/${abcvmuser}/outboundcidnum)=${abcdnid});
        Set(DB(${imdbk}/lastdial)=${EPOCH});
        // TODO: support more than nine Friends per Yurt
        // TODO: break out this for loop into a macro
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( ${LEN(${frndtel})} == 0 ) {
                NoOp();
            } else {
                Set(frndialstr=PJSIP/${frndtel});
                // Assume anything less than six digits/letters is not
                // reachable via MYTRUNK calls
                if( ${LEN(${frndtel})} < 7 ) {
                    &pngnpbx-abc-demo-friend-map(${frndtel});
                } else {
                    if( ${LEN(${frndtel})} == 10 ) {
                        // TODO: this is provider and location specific
                        Set(frndtel=1${frndtel});
                    }
                    // TODO: replace "MYTRUNK" trunk name to make dialing generic
                    // (maybe as context you define elsewhere eg. extensions.conf)
                    // also make it not require PJSIP so much...
                    Set(frndialstr=PJSIP/${frndtel}@MYTRUNK);
                }
                &pngnpbx-abc-friend(${i},${frndialstr});
            }
        }
        &pngnpbx-abc-howdy-yall();
        goto pngnpbx-abc-itm-boss,s,mainmenu;
    }
}

context pngnpbx-abc-itm-accounting {
    _[123456#]! => goto pngnpbx-abc-itm-boss,${EXTEN},1;
    i => goto pngnpbx-abc-itm-boss,s,mainmenu;
    s => {
        Set(minutesleft=${DB(pngnpbx/abc/insta/${abcvmuser}/minutesleft)});
        if( ${minutesleft} < 0 ) {
            Set(minutesleft=0);
        }
        &pngnpbx-abc-clu(${minutesleft}-minutes-left,Monthly Minutes Left);
        Background(current_account_balance);
        SayNumber(${minutesleft});
        Background(minutes);
        WaitExten(1);
        &pngnpbx-abc-clu(1-720-32-42-72-9,Contact PBX Sales);
        Background(please-try&calling&sales&digits/2&ha/up&your-account);
        WaitExten(2);
        goto pngnpbx-abc-itm-boss,s,mainmenu;
    }
}

macro pngnpbx-abc-demo-friend-map(ft_) {
    // TODO: make this into a HASH or CUTtable list
    if( "x${abcfg_gen_dm}" == "xnope" ) {
        return;
    }
    if( "${ft_}" == "7001" ) {
        Set(frndialstr=PJSIP/ABCtheOG);
    } else if( "${ft_}" == "7002" ) {
        Set(frndialstr=PJSIP/ABCremoteend);
    } else if( "${ft_}" == "7003" ) {
        Set(frndialstr=PJSIP/ABCfriend1);
    } else if( "${ft_}" == "7004" ) {
        Set(frndialstr=PJSIP/ABCfriend2);
    } else if( "${ft_}" == "7005" ) {
        Set(frndialstr=PJSIP/ABCtroll1);
    } else if( "${ft_}" == "7006" ) {
        Set(frndialstr=PJSIP/ABCtroll2);
    } else if( "${ft_}" == "7007" ) {
        Set(frndialstr=PJSIP/ABCpaladin1);
    } else if( "${ft_}" == "7008" ) {
        Set(frndialstr=PJSIP/ABCpaladin2);
    } else {
        // no change
    }
    return;
}

/****************************************************************************
 * BEGIN PRIVATE SECTION                                                    *
 * The rest of the file contains internal macros and contexts that should   *
 * (usually) only be referenced from elsewhere within this particular file. *
 ***************************************************************************
 */

/* The Originate() application got asynchronous 'a' option in ASTERISK 16.
 * But earlier versions we try to work with eg. 13, by spooling call files. */
macro pngnpbx-abc-originate(leg_,ctx_,ext_,opt_) {
    Set(LOCAL(v)=${VERSION(ASTERISK_VERSION_NUM)});
    // The 00800 is due to (patched) bug #29021 in certified version numbering
    // and affects all certified versions up to and including 16.8-cert3.
    if( "x${v}" == "x00800" || ${v} >= 160000 ) {
        Originate(${leg_},exten,${ctx_},${ext_},1,1,a${opt_});
        NoOp(result of originate was ${ORIGINATE_STATUS});
    } else {
        // TODO: support the gosub b option just like Originate
        //       (but it is only used with Yurt Corners in WFH modes)
        Set(LOCAL(t)=${STRFTIME(,UTC,%F-%H%M%S-%3q)});
        Set(LOCAL(f)="/tmp/pngnpbx-abc-orig-${ctx_}-${ext_}-${t}.call");
        System(touch ${f});
        Set(LOCAL(c1)=${FILE_COUNT_LINE(${f},u)});
        if( ${c1} != 0 ) {
            Log(ERROR,File problems - could not originate - check ${f});
            Log(ERROR,The file might be hidden in a systemd /tmp directory.);
        } else {
            Set(FILE(${f},0,1,l,u)=Channel: ${leg_});
            Set(FILE(${f},,,al,u)=Context: ${ctx_});
            Set(FILE(${f},,,al,u)=Extension: ${ext_});
            Set(FILE(${f},,,al,u)=Priority: 1);
            Set(FILE(${f},,,al,u)=Callerid: PNGNPBX ABC <007>);
            Set(LOCAL(c2)=${FILE_COUNT_LINE(${f},u)});
            if( ${c2} != 5 ) {
                Wait(.2); // file may need to sync on drive
            }
            System(mv ${f} /var/spool/asterisk/outgoing/);
        }
    }
    return;
}

/* Calculate minutes left, in an orderly LOCK'd manner. */
macro pngnpbx-abc-teamcalc(abcid_,newminutes_) {
    NoOp(entering AEL teamcalc macro at ${EPOCH});
    if( ${LEN(${abcid_})} == 0 ) {
        Return(0);
    }
    Set(LOCAL(firstml)=${DB(pngnpbx/abc/insta/${abcid_}/minutesleft)});
    Set(LOCAL(newml)=0);
    if( ! ${LOCK(mlock${abcid_})} ) {
        Log(ERROR,OOPS DID NOT GET LOCK - MANUALLY CHECK MINUTES USAGE);
    } else {
        NoOp(locked ${abcid_} at ${EPOCH});
        Set(LOCAL(lastml)=${DB(pngnpbx/abc/insta/${abcid_}/minutesleft)});
        if( "x${newminutes_:0:1}" == "x+" ) {
            // add credit
            Set(newml=${MATH(${lastml}+${newminutes_:1},int)});
        } else if( ${newminutes_} >= 0 ) {
            // reset credit
            Set(newml=${newminutes_});
        } else {
            // debit credit
            Set(newml=${DEC(lastml)});
        }
        Set(DB(pngnpbx/abc/insta/${abcid_}/minutesleft)=${newml});
        if( ${UNLOCK(mlock${abcid_})} ) {
            NoOp(unlocked ${abcid_} at ${EPOCH});
        } else {
            Log(ERROR,COULD NOT UNLOCK!?!?);
        }
    }
    Set(LOCAL(finalml)=${DB(pngnpbx/abc/insta/${abcid_}/minutesleft)});
    Set(LOCAL(diffml)=$[${firstml}-${finalml}]);
    NoOp(leaving AEL teamcalc macro at ${EPOCH});
    Return(${newml});
    return;
}

/* The "video" macro checks if video is requested then activates it. */
macro pngnpbx-abc-video() {
    if( "x${DB(pngnpbx/abc/cb/${pngnpbx_abc_id}/video)}" == "xyes" ) {
        // TODO: more codecs and dynamic codecs
        //Set(PJSIP_MEDIA_OFFER(audio)=!all,ulaw);
        //Set(PJSIP_MEDIA_OFFER(video)=!all,h264);
        //Set(PJSIP_SEND_SESSION_REFRESH()=invite);
        NoOp();
    }
    return;
}

/* The "clu" macro changes display name and number on caller phone. */
macro pngnpbx-abc-clu(clunum_,cluname_) {
    if( ${LEN(${cluname_})} > 0 ) {
        // TODO: filter this number
        if( ${LEN(${clunum_})} > 0 ) {
            Set(LOCAL(pclunum)=${STRREPLACE(clunum_, ,)});
            Set(CONNECTEDLINE(num,i)=${pclunum});
        } else {
            Set(CONNECTEDLINE(num,i)=${CALLERID(DNID)});
        }
        Set(CONNECTEDLINE(name,i)=${cluname_});
        Set(CONNECTEDLINE(pres)=allowed);
    }
    return;
}

/* The "key-read" macro gets first 16 characters from the key file. */
macro pngnpbx-abc-key-read(fpath_) {
    Set(LOCAL(fn)="pngnpbx-abc-key.txt");
    // TODO: Allow keys to be placed elsewhere.
    //Set(LOCAL(fp)="/etc/asterisk/keys");
    Set(LOCAL(fp)="/var/lib/asterisk/keys");
    if( ${LEN(${fpath_})} > 0 ) {
        Set(fp=${fpath_});
    }
    Set(abckey=${FILE(${fp}/${fn},0,16)});
    if( ${LEN(${abckey})} != 16 ) {
        Set(abckey=);
    }
    return;
}

/* The "key-gen" macro generates a new key and saves it in to a file. */
/* It should only be entered infrequently, such as once during initialization,
 * if at all eg. you generate your own keys separately outside of ASTERISK. */
macro pngnpbx-abc-key-gen(fpath_) {
    Set(LOCAL(fn)="pngnpbx-abc-key.txt");
    // TODO: Allow keys to be placed elsewhere.
    //Set(LOCAL(fp)="/etc/asterisk/keys");
    Set(LOCAL(fp)="/var/lib/asterisk/keys");
    local HeFights=;
    local ToDefend=;
    local OurLiberty=;
    local Voluntaryism=;
    local NonAggressionPrinciple=;
    local WiltChamberlainProblem=;
    local BrokenWindowsFallacy=;
    local WhoWillBuildTheRoads=;

    if( ${LEN(${fpath_})} > 0 ) {
        Set(fp=${fpath_});
    }

    Set(LOCAL(ConstitutionIsLock)=${fp}/${fn});
    Set(LOCAL(UsersIsKey)=${FILE(${ConstitutionIsLock},0,16)});

    // only overwrite existing file if it is too short of a key value
    if( "x${UsersIsKey}" == "x" || ${LEN(${UsersIsKey})} < 16 ) {
        Set(HeFights="THANK YOU ${RAND(1,1000000)} PAUL");
        Set(HeFights="${HeFights} FOR DEFENDING THE 6TH AMENDMENT");
        Set(ToDefend="${AES_ENCRYPT(${HeFights} a very ${UNIQUEID})}");
        Set(OurLiberty="${AES_ENCRYPT(${HeFights} in our ${EPOCH})}");
        Set(Voluntaryism=${ToDefend}${OurLiberty});
        Set(NonAggressionPrinciple=${LEN(${Voluntaryism})});
        Set(WiltChamberlainProblem=${RAND(1,$[${NonAggressionPrinciple}-17])});
        Set(BrokenWindowsFallacy=${Voluntaryism:${WiltChamberlainProblem}:16});
        Set(WhoWillBuildTheRoads=${STRREPLACE(BrokenWindowsFallacy,=,0)});
        Set(FILE(${fp}/${fn})=${WhoWillBuildTheRoads});
    }

    return;
}

/* The "marco" macro is used to update phone GPS position. */
macro pngnpbx-abc-marco(ext_,plc_,lat_,lng_,elv_,uni_) {
    local egps=;
    &pngnpbx-abc-key-read("");
    if( ${LEN(${abckey})} == 0 ) {
        // Must have a key to encrypt the data with.
        // Key must be 16 characters. Or less.
        // TODO: generate one automatically (hmmmm)
        return;
    }
    if( ${LEN(${ext_})} == 0 ) {
        // Must have an extension number.
        // TODO: lift it from the caller ID number
        return;
    }
    if( ${LEN(${plc_})} == 0 ) {
        Set(plc_=TBD);
        if( ${LEN(${lat_})} == 0 || ${LEN(${lng_})} == 0 ) {
            // Must have co-ordinates. Either plus code or lat&lon.
            // TODO: maybe use defaults of the PBX 
            return;
        }
    }
    if( ${LEN(${elv_})} == 0 ) {
        // Assume a mile high. :)
        Set(elv_=5280);
    }
    if( ${LEN(${uni_})} == 0 ) {
        Set(uni_=feet);
    }
    if( "x${plc_}" != "xTBD" ) {
        Set(egps=${AES_ENCRYPT(${abckey},${plc_} ${elv_} ${uni_})});
    } else {
        Set(egps=${AES_ENCRYPT(${abckey},${lat_} ${lng_} ${elv_} ${uni_})});
    }
    Set(DB(pngnpbx/abc/egps/${ext_}/crypt)=${egps});
    Set(DB(pngnpbx/abc/egps/${ext_}/touch)=${EPOCH});
    return;
}

/* The "polo" macro is used to retrieve current phone GPS position
 * as it is stored in the internal ASTERISK DB. They must have called
 * out to "marco" sometime before "polo". */
macro pngnpbx-abc-polo(ext_) {
    &pngnpbx-abc-key-read("");
    if( ${LEN(${abckey})} == 0 ) {
        // Must have a key to decrypt the data with.
        return;
    }
    if( ${LEN(${ext_})} == 0 ) {
        // Must have an extension number.
        return;
    }
    Set(LOCAL(egps)=${DB(pngnpbx/abc/egps/${ext_}/crypt)});
    if( ${LEN(${egps})} == 0 ) {
        Log(ERROR,Asked to decrypt location but nothing stored!);
    } else {
        Set(dgps=${AES_DECRYPT(${abckey},${egps})});
        if( ${FIELDQTY(dgps, )} == 3 ) {
            Set(abcdplc=${CUT(dgps, ,1)});
            Set(abcdlat=); // TODO compute on the fly
            Set(abcdlng=); // TODO compute on the fly
            Set(abcdelv=${CUT(dgps, ,2)});
            Set(abcduni=${CUT(dgps, ,3)});
        } else {
            Set(abcdplc=); // TODO compute on the fly
            Set(abcdlat=${CUT(dgps, ,1)});
            Set(abcdlng=${CUT(dgps, ,2)});
            Set(abcdelv=${CUT(dgps, ,3)});
            Set(abcduni=${CUT(dgps, ,4)});
        }
    }
    return;
}

/* The "check-marco" macro looks at last time the extension GPS was updated.
 * If not recently enough, then it re-directs to the IVR. */
macro pngnpbx-abc-check-marco-polo-days(ext_,days_) {
    Set(LOCAL(touched)=${DB(pngnpbx/abc/egps/${ext_}/touch)});
    Set(LOCAL(recently)=${MATH(${days_}*24*60*60,int)});
    if( ${LEN(${touched})} > 0 ) {
        Set(difftouch=${MATH(${EPOCH}-${touched},int)});
        if( ${difftouch} < ${recently} ) {
            return;
        }
    }
    Return(needschange); // sets GOSUB_RETVAL on return
    return;
}

/* The "geohdrs" macro is only utilized in tandem with "gps" macro. */
macro pngnpbx-abc-geohdrs(abcid_) {
    // TODO: check if this is an outgoing PJSIP channel eg. chan_sip
    // TODO: PIDF-LO support
    Set(LOCAL(plc)=${DB(pngnpbx/abc/cb/${abcid_}/gps/plc)});
    Set(LOCAL(lat)=${DB(pngnpbx/abc/cb/${abcid_}/gps/lat)});
    Set(LOCAL(lng)=${DB(pngnpbx/abc/cb/${abcid_}/gps/lng)});
    Set(LOCAL(elv)=${DB(pngnpbx/abc/cb/${abcid_}/gps/elv)});
    Set(LOCAL(url)=${DB(pngnpbx/abc/cb/${abcid_}/gps/url)});
    // The Geolocation header is defined in RFC 6442
    Set(PJSIP_HEADER(add,Geolocation)=<${url}?lat=${lat}&lng=${lng}>);
    Set(PJSIP_HEADER(add,Geolocation-Routing)=no);
    return;
}

/* The "alerthdrs" macro is for paging Trolls automatically. */
macro pngnpbx-abc-alerthdrs() {
    // TODO: check if this is an outgoing PJSIP channel eg. chan_sip
    // TODO: provide ability to change the header based on phone make/model
    Set(PJSIP_HEADER(add,Alert-Info)=Ring Answer);
    return;
}

macro pngnpbx-abc-cbo-wfh-menu-admin() {
    Set(LOCAL(saymenu)=confbridge-inc-list-vol-in&press-star&digits/2);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-dec-list-vol-in&press-star&digits/3);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-leave-in&press-star&digits/4);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-lock-in&press-star&digits/5);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-mute-in&press-star&digits/6);
    //Set(LOCAL(saymenu)=${saymenu}&to-record-call&or&turn-off-recording&press-star&digits/7);
    Set(LOCAL(saymenu)=${saymenu}&shall-i-try-again&another-time&on-no-answer&users&press-star&digits/8);
    Set(LOCAL(saymenu)=${saymenu}&conf-now-muted&or&conf-now-unmuted&press-9&digits/9);
    Set(LOCAL(saymenu)=${saymenu}&for&users&count&press-star&digits/pound);
    Set(LOCAL(saymenu)=${saymenu}&to-hear-menu-again&press-star&digits/star);
    // cloned ZM/GM admin options
    // *4 - "G"et out (destroys the Yurt when admin leaves WFH)
    // *5 - "L"ock or unlock door to Yurt
    // *6 - "M"ute or unmute yourself
    // *7 - "R"ecording start/stop. (TODO/MAYBE - currently recording is all-or-nothing)
    // *# - hear number of participants in meeting
    // ** - hear all available commands
    // 99 - "ZZ"zzz - Mute or unMute ALL participants.
    // extra ABC admin options
    // *0 - move all Friends back from 9 break-out corners into middle of Yurt
    // *2 - "A"mp/increase listening volume
    // *3 - "D"ecrease listening volume
    // *8 - "T"ry dialing Friends again if they did not answer or hung up too early.
    // *9 - "W"ave hand / make a point of order/information request.
    Set(CONFBRIDGE(menu,*0)=dialplan_exec(pngnpbx-abc-wfh-corner-recenter,s,1));
    Set(CONFBRIDGE(menu,*2)=increase_listening_volume);
    Set(CONFBRIDGE(menu,*3)=decrease_listening_volume);
    Set(CONFBRIDGE(menu,*4)=leave_conference);
    Set(CONFBRIDGE(menu,*5)=admin_toggle_conference_lock);
    Set(CONFBRIDGE(menu,*6)=toggle_mute);
    Set(CONFBRIDGE(menu,*7)=no_op); // TODO
    Set(CONFBRIDGE(menu,*8)=dialplan_exec(pngnpbx-abc-wfh-redial,${pngnpbx_abc_id}!${scnf},1));
    Set(CONFBRIDGE(menu,*9)=dialplan_exec(pngnpbx-abc-hola,poo!${pngnpbx_abc_id}!yurt,1));
    Set(CONFBRIDGE(menu,99)=admin_toggle_mute_participants);
    Set(CONFBRIDGE(menu,*#)=participant_count);
    Set(CONFBRIDGE(menu,**)=playback_and_continue(${saymenu}));
    return;
}

macro pngnpbx-abc-cbo-wfh-menu-user(id_,yp_) {
    Set(LOCAL(saymenu)=confbridge-inc-list-vol-in&press-star&digits/2);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-dec-list-vol-in&press-star&digits/3);
    Set(LOCAL(saymenu)=${saymenu}&confbridge-mute-in&press-star&digits/6);
    Set(LOCAL(saymenu)=${saymenu}&for&point&off&orders&or&point&off&information&press-star&digits/9);
    Set(LOCAL(saymenu)=${saymenu}&to-hear-menu-again&press-star&digits/star);
    // cloned ZM user options
    // *6 - "M"ute or unmute yourself
    // *9 - "W"ave hand / make a point of order/information request.
    // extra ABC user options
    // *0 move from one of 9 break-out corners of Yurt back into middle of Yurt
    // *#1 through *#9 - move to a break-out corner 1-9 with other Users
    // *2 - "A"mp/increase listening volume
    // *3 - "D"ecrease listening volume
    // ** - hear all available commands
    Set(CONFBRIDGE(menu,*0)=no_op); // only needs defining in the corners
    for( i=1; ${i} <= 9; i=${i} + 1 ) {
        Set(CONFBRIDGE(menu,*#${i})=dialplan_exec(pngnpbx-abc-wfh-corner-join,${i},1));
    }
    Set(CONFBRIDGE(menu,*2)=increase_listening_volume);
    Set(CONFBRIDGE(menu,*3)=decrease_listening_volume);
    Set(CONFBRIDGE(menu,*6)=toggle_mute);
    Set(CONFBRIDGE(menu,*9)=dialplan_exec(pngnpbx-abc-hola,poo!${id_}!${yp_},1));
    Set(CONFBRIDGE(menu,**)=playback_and_continue(${saymenu}));
    return;
}

macro pngnpbx-abc-cbo-wfh-admin() {
    CONFBRIDGE(user,marked)=yes;
    CONFBRIDGE(user,admin)=yes;
    CONFBRIDGE(user,announce_join_leave)=no;
    CONFBRIDGE(user,announce_only_user)=no;
    CONFBRIDGE(user,announce_user_count)=no;
    CONFBRIDGE(user,dsp_drop_silence)=yes;
    CONFBRIDGE(user,end_marked)=yes;
    CONFBRIDGE(user,jitterbuffer)=yes;
    CONFBRIDGE(user,music_on_hold_when_empty)=yes;
    CONFBRIDGE(user,quiet)=no;
    CONFBRIDGE(user,startmuted)=no;
    CONFBRIDGE(user,wait_marked)=no;
    CONFBRIDGE(user,dtmf_passthrough)=no;
    return;
}

macro pngnpbx-abc-cbo-wfh-user(cnftmt_) {
    // TODO: play beeperr sound when the OG caller leaves the bridge
    CONFBRIDGE(user,marked)=no;
    CONFBRIDGE(user,admin)=no;
    CONFBRIDGE(user,announce_join_leave)=no;
    CONFBRIDGE(user,announce_only_user)=no;
    CONFBRIDGE(user,announce_user_count)=no;
    CONFBRIDGE(user,dsp_drop_silence)=yes;
    CONFBRIDGE(user,end_marked)=yes;
    CONFBRIDGE(user,jitterbuffer)=yes;
    CONFBRIDGE(user,music_on_hold_when_empty)=yes;
    CONFBRIDGE(user,quiet)=no;
    CONFBRIDGE(user,startmuted)=no;
    CONFBRIDGE(user,wait_marked)=no;
    CONFBRIDGE(user,dtmf_passthrough)=no;
    Set(CONFBRIDGE(user,timeout)=${cnftmt_});
    return;
}

macro pngnpbx-abc-cbo-wfh-corner() {
    Set(CONFBRIDGE(menu,*0)=leave_conference); // fall back to center
    CONFBRIDGE(user,end_marked)=no;
    CONFBRIDGE(user,announce_user_count)=yes;
    return;
}

macro pngnpbx-abc-cbo-eoc-menu(id_,yp_) {
    Set(LOCAL(saymenu)=silence/1); // TODO: add prompts for menu
    //CONFBRIDGE(menu,clear)=hmm;
    Set(CONFBRIDGE(menu,*)=dialplan_exec(pngnpbx-abc-hola,gps!${id_}!${yp_},1)); // HERE!
    Set(CONFBRIDGE(menu,0)=playback_and_continue(${saymenu})); // OPERator
    //Set(CONFBRIDGE(menu,1)=dialplan_exec(pngnpbx-abc-hola,dtmf!${id_}!${yp_},1)); // 1
    //Set(CONFBRIDGE(menu,1)=participant_count); // TODO: does nothing if only one in conf
    Set(CONFBRIDGE(menu,1)=dialplan_exec(pngnpbx-abc-hola,usercount!${id_}!${yp_},1)); // 1
    Set(CONFBRIDGE(menu,2)=dialplan_exec(pngnpbx-abc-hola,ainfo!${id_}!${yp_},1)); // A
    Set(CONFBRIDGE(menu,3)=decrease_listening_volume); // D
    Set(CONFBRIDGE(menu,4)=increase_listening_volume); // I
    Set(CONFBRIDGE(menu,5)=dialplan_exec(pngnpbx-abc-hola,extnum!${id_}!${yp_},1)); // L
    Set(CONFBRIDGE(menu,6)=dialplan_exec(pngnpbx-abc-hola,cbnum!${id_}!${yp_},1)); // N
    Set(CONFBRIDGE(menu,7)=dialplan_exec(pngnpbx-abc-hola,dloc!${id_}!${yp_},1)); // S
    Set(CONFBRIDGE(menu,8)=no_op);
    Set(CONFBRIDGE(menu,9)=dialplan_exec(pngnpbx-abc-hola,yes!${id_}!${yp_},1)); // Y
    return;
}

/* The "cbo-eoc-user" macro defines only 'common' items for the conference. */
macro pngnpbx-abc-cbo-eoc-user(cnftmt_) {
    // TODO: play beeperr sound when the OG caller leaves the bridge
    CONFBRIDGE(user,admin)=no;
    CONFBRIDGE(user,announce_join_leave)=no;
    CONFBRIDGE(user,announce_only_user)=no;
    CONFBRIDGE(user,announce_user_count)=no;
    CONFBRIDGE(user,dsp_drop_silence)=yes;
    CONFBRIDGE(user,end_marked)=no;
    CONFBRIDGE(user,jitterbuffer)=yes;
    CONFBRIDGE(user,music_on_hold_when_empty)=no;
    CONFBRIDGE(user,quiet)=yes;
    CONFBRIDGE(user,startmuted)=no;
    CONFBRIDGE(user,wait_marked)=no;
    CONFBRIDGE(user,dtmf_passthrough)=yes;
    CONFBRIDGE(user,marked)=no;
    Set(CONFBRIDGE(user,timeout)=${cnftmt_});
    return;
}

/* The "cbo" macro defines human member items for the conference.
 * This includes OG caller, Remote End, Friends, and Paladins. */
macro pngnpbx-abc-cbo(abcid_,yurt_or_palace_) {
    local cnftmt=;
    local dorecord=;
    local abcshorty=;

    Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid_}/conftimeout)});
    Set(TIMEOUT(absolute)=${cnftmt});
    Set(dorecord=${DB(pngnpbx/abc/cb/${abcid_}/record)});
    Set(abcshorty=${DB(pngnpbx/abc/cb/${abcid_}/shorty)});

    if( "x${dorecord}" == "xyes" ) {
        if( ${IFMODULE(app_mixmonitor.so)} ) {
            MixMonitor(${abcshorty}-${abcid_}-${UNIQUEID}.wav);
        } else {
            Monitor(wav,${abcshorty}-${abcid_}-${UNIQUEID});
        }
    }

    CONFBRIDGE(bridge,max_members)=42;
    CONFBRIDGE(bridge,video_mode)=first_marked;

    Set(LOCAL(v)=${VERSION(ASTERISK_VERSION_NUM)});
    // The 00800 is due to (patched) bug #29021 in certified version numbering
    // and affects all certified versions up to and including 16.8-cert3.
    if( "x${v}" == "x00800" || ${v} >= 160000 ) {
        CONFBRIDGE(bridge,remb_send_interval)=1000;
    }

    // Dynamic menu change requires first choosing template.
    // TODO: file a bug report because no template = crash
    CONFBRIDGE(menu,template)=default_menu;

    if( "x${DB(pngnpbx/abc/cb/${abcid_}/teams)}" == "xyes" ) {
        &pngnpbx-abc-cbo-wfh-user(${cnftmt});
        &pngnpbx-abc-cbo-wfh-menu-user(${abcid_},yurt);
    } else if( "x${DB(pngnpbx/abc/cb/${abcid_}/scenario)}" == "xdoorbell" ) {
        &pngnpbx-abc-cbo-eoc-user(${cnftmt});
        &pngnpbx-abc-cbo-eoc-menu(${abcid_},${yurt_or_palace_});
        CONFBRIDGE(user,wait_marked)=yes;
        CONFBRIDGE(user,end_marked)=yes;
    } else {
        &pngnpbx-abc-cbo-eoc-user(${cnftmt});
        &pngnpbx-abc-cbo-eoc-menu(${abcid_},${yurt_or_palace_});
    }

    return;
}

/* The "cbo-troll" macro provides. */
macro pngnpbx-abc-cbo-troll(abcid_,yurt_or_palace_) {
    local cnftmt=;
    Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid_}/conftimeout)});
    Set(TIMEOUT(absolute)=${cnftmt});

    &pngnpbx-abc-cbo-eoc-user(${cnftmt});

    CONFBRIDGE(bridge,max_members)=42;
    CONFBRIDGE(bridge,video_mode)=first_marked;

    // Trolls cannot talk - mute them and give them no menu option to change it
    CONFBRIDGE(user,startmuted)=yes;
    CONFBRIDGE(user,marked)=no;

    CONFBRIDGE(menu,template)=default_menu;
    Set(CONFBRIDGE(menu,*)=no_op);
    Set(CONFBRIDGE(menu,0)=no_op);
    Set(CONFBRIDGE(menu,1)=no_op);
    Set(CONFBRIDGE(menu,2)=no_op);
    Set(CONFBRIDGE(menu,3)=decrease_listening_volume); // D
    Set(CONFBRIDGE(menu,4)=increase_listening_volume); // I
    Set(CONFBRIDGE(menu,5)=no_op);
    Set(CONFBRIDGE(menu,6)=no_op);
    Set(CONFBRIDGE(menu,7)=no_op);
    Set(CONFBRIDGE(menu,8)=no_op);
    Set(CONFBRIDGE(menu,9)=no_op);
    return;
}


/* The "account" macro is called internally from several places. */
macro pngnpbx-abc-account(x_) {
    //Answer(); // NO! Don't Answer! Breaks Tin Can Mode!
    Set(abcid=${FILTER(0-9a-zA-Z,${x_})});
    Set(abcshorty=${DB(pngnpbx/abc/cb/${abcid}/shorty)});
    Set(CHANNEL(accountcode)=${abcshorty});
    return;
}

/* The "tones" macro plays a little ditty. Fly birdy, fly! */
macro pngnpbx-abc-tones() {
    //Answer(); // NO!
    PlayTones(432/120,0/20,485/120,0/20,514/120,0/500); // A4, B4, C4
    Wait(.420);
    StopPlayTones();
    return;
}

/* The "song" macro plays more tones. */
macro pngnpbx-abc-song() {
    PlayTones(286/300,322/300,384/300,0/300); // A B C
    Wait(1.2);
    PlayTones(486/300,486/400,432/300,384/100,0/100); // Its easy as
    Wait(1.2);
    PlayTones(286/300,322/300,384/300,0/300); // 1 2 3
    Wait(1.2);
    PlayTones(486/300,486/400,432/300,384/100,0/100); // As simple as
    Wait(1.2);
    StopPlayTones();
    return;
}

/* The "tts-status" macro helps keep multiple sounds from playing at the same
 * time. */
macro pngnpbx-abc-tts-status(abcid_,yurt_or_palace_,status_) {
    Set(DB(pngnpbx/abc/cb/${abcid_}/${yurt_or_palace_}/ttsactive)=${status_});
    if ( "x${status_}" == "x0" ) {
        Hangup();
    }
    return;
}

/* The "tts-nope" context helps keep multiple sounds from playing at the same
 * time. */
context pngnpbx-abc-tts-nope {
    s => Hangup();
}

/* The "tts" context speaks out info into the conference.
 *
 * Various extensions can be jumped to:
 *
 * gps      - speaks out the GPS co-ordinates of the OG caller.
 *            Includes the elevation/depth/etc and units (feet/meters/floor/room)
 * dloc     - speaks out the location of the OG caller.
 * ainfo    - speaks out the additional address information of the OG caller.
 * extnum   - speaks out the extension number of the OG caller.
 * cbnum    - speaks out the call back number of the OG caller.
 * yes      - speaks out YES DEAR.
 * poo      - speaks out Point Off Orders.
 * dtmf     - TODO: sends DTMF tones.
 * genie    - TODO: speaks out response from a remote smart process.
 */
context pngnpbx-abc-tts {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        Set(p3=${CUT(sEXTEN,!,3)});
        Set(sub=${p1});
        &pngnpbx-abc-account(${p2});
        Set(yp=${p3});
        Set(ttsact=${DB(pngnpbx/abc/cb/${abcid}/${yp}/ttsactive)});
        if( "x${ttsact}" == "x1" ) {
            goto pngnpbx-abc-tts-nope,s,1;
        }
        &pngnpbx-abc-tts-status(${abcid},${yp},1);
        &pngnpbx-abc-tones();
        Set(SAY_DTMF_INTERRUPT=true);
        goto ${sub},1;
    }
    gps => {
        Set(plc=${DB(pngnpbx/abc/cb/${abcid}/gps/plc)});
        Set(lat=${DB(pngnpbx/abc/cb/${abcid}/gps/lat)});
        Set(lng=${DB(pngnpbx/abc/cb/${abcid}/gps/lng)});
        Set(elv=${DB(pngnpbx/abc/cb/${abcid}/gps/elv)});
        Set(uni=${DB(pngnpbx/abc/cb/${abcid}/gps/uni)});
        if( ${LEN(${plc})} > 0 ) {
            Background(letters/plus&encode&location&is);
            SayAlpha(${plc});
            if( ${LEN(${elv})} > 0 ) {
                Background(and);
            }
        } else if( ${LEN(${lat})} > 0 || ${LEN(${lng})} > 0  ) {
            SayAlpha(gps);
            Background(location&is);
            if( ${LEN(${lat})} > 0 ) {
                Wait(.2);
                SayAlpha(lat);
                SayNumber(${CUT(lat,.,1)});
                Background(letters/dot);
                SayDigits(${CUT(lat,.,2)});
                if( ${LEN(${lng})} > 0 ) {
                    Background(by);
                }
            }
            if( ${LEN(${lng})} > 0 ) {
                Wait(.2);
                SayAlpha(lng);
                SayNumber(${CUT(lng,.,1)});
                Background(letters/dot);
                SayDigits(${CUT(lng,.,2)});
            }
            if( ${LEN(${elv})} > 0 ) {
                Background(and);
            }
        } else if( ${LEN(${elv})} > 0 ) {
            Background(letters/z&location&is);
        } else {
            Background(location&is-curntly-unavail);
        }
        if( ${LEN(${elv})} > 0 ) {
            if( ${LEN(${uni})} > 0 ) {
                SayAlpha(${uni});
            }
            SayNumber(${elv});
        }
        Hangup();
    }
    dloc => {
        Set(street=${DB(pngnpbx/abc/cb/${abcid}/dloc/street)});
        Set(city=${DB(pngnpbx/abc/cb/${abcid}/dloc/city)});
        Set(state=${DB(pngnpbx/abc/cb/${abcid}/dloc/state)});
        Set(zip=${DB(pngnpbx/abc/cb/${abcid}/dloc/zip)});
        Set(ainfo=${DB(pngnpbx/abc/cb/${abcid}/dloc/ainfo)});
        if( ${LEN(${street})} == 0
         || ${LEN(${city})} == 0 
         || ${LEN(${state})} == 0 
         || ${LEN(${zip})} == 0 ) {
            Hangup();
        }
        Background(zip-code);
        SayAlpha(${zip});
        Background(address);
        SayAlpha(${street});
        WaitExten(1);
        SayAlpha(${city});
        WaitExten(0.5);
        SayAlpha(${state});
        if( ${LEN(${ainfo})} == 0 ) {
            Hangup();
        }
        WaitExten(0.25);
        Background(added&information);
        SayAlpha(${ainfo});
        Hangup();
    }
    ainfo => {
        Set(ainfo=${DB(pngnpbx/abc/cb/${abcid}/dloc/ainfo)});
        Background(added&information);
        if( ${LEN(${ainfo})} == 0 ) {
            Background(not-yet-assigned);
        } else {
            SayAlpha(${ainfo});
        }
        Hangup();
    } 
    extnum => {
        Set(cidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Background(extension);
        if( ${LEN(${cidnum})} == 0 ) {
            Background(from-unknown-caller);
        } else {
            SayAlpha(${cidnum});
        }
        Hangup();
    } 
    cbnum => {
        Set(cbnum=${DB(pngnpbx/abc/cb/${abcid}/outboundcidnum)});
        Background(call);
        if( ${LEN(${cbnum})} == 0 ) {
            Background(from-unknown-caller);
        } else {
            Background(from);
            SayAlpha(${cbnum});
        }
        Hangup();
    } 
    yes => {
        Background(yes-dear2);
        Hangup();
    } 
    poo => {
        Background(point&off&orders);
        Hangup();
    }
    dtmf => {
        // TODO: fix this
        Read(testing,silence/4,1);
        SendDTMF(${testing},.25,500,${remotechan});
        Hangup();
        //_#X! => SendDTMF(${EXTEN:1},.25,500,${remotechan});
    }
    genie => {
        NoOp(TODO);
        Hangup();
    }
    tones => {
        Hangup();
    }
    abc => {
        SayAlpha(ABC);
        Hangup();
    }
    usercount => {
        Set(cb=pngnpbx-abc-${yp}-${abcid});
        Set(cbpc=${CONFBRIDGE_INFO(parties,${cb})});
        Background(speed-dial);
        SayAlpha(${DEC(cbpc)});
        Background(users);
        Hangup();
    }
    # => &pngnpbx-abc-tts-status(${abcid},${yp},0);
    h => &pngnpbx-abc-tts-status(${abcid},${yp},0);
    i => NoOp(ignoring invalid extension);
}

/* The "hola" contexts spools calls into the conference for Text-To-Speech. */
context pngnpbx-abc-hola {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        Set(p3=${CUT(sEXTEN,!,3)});
        Set(sub=${p1});
        &pngnpbx-abc-account(${p2});
        Set(yp=${p3});
        Set(pvthola=Local/${sub}!${abcid}!${yp}@pngnpbx-abc-hola-anchor);
        goto ${sub},1;
    }
    gps => {
        Set(plcX=${DB(pngnpbx/abc/cb/${abcid}/gps/plc)});
        Set(latX=${DB(pngnpbx/abc/cb/${abcid}/gps/lat)});
        Set(lngX=${DB(pngnpbx/abc/cb/${abcid}/gps/lng)});
        Set(elvX=${DB(pngnpbx/abc/cb/${abcid}/gps/elv)});
        Set(uniX=${DB(pngnpbx/abc/cb/${abcid}/gps/uni)});
        Set(X1=${elvX}${uniX});
        if( ${LEN(${plcX})} > 0 ) {
            Set(X2=+code ${plcX});
        } else if ( ${LEN(${latX})} > 0 || ${LEN(${lngX})} > 0 ) {
            Set(X2=gps ${latX} ${lngX});
        } else {
            Set(X2=location);
        }
        if( ${LEN(${X1})} == 0 ) {
            Set(X1=UNKNOWN);
        }
        &pngnpbx-abc-clu(${X1},${X2});
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    dloc => {
        Set(streetX=${DB(pngnpbx/abc/cb/${abcid}/dloc/street)});
        Set(cityX=${DB(pngnpbx/abc/cb/${abcid}/dloc/city)});
        Set(stateX=${DB(pngnpbx/abc/cb/${abcid}/dloc/state)});
        Set(zipX=${DB(pngnpbx/abc/cb/${abcid}/dloc/zip)});
        Set(X1=${zipX}${stateX}${cityX});
        Set(X2=${streetX});
        if( ${LEN(${X1})} == 0 ) {
            Set(X1=UNKNOWN);
        }
        if( ${LEN(${X2})} == 0 ) {
            Set(X2=Street City State Zip);
        }
        &pngnpbx-abc-clu(${X1},${X2});
        &pngnpbx-abc-originate(${pvthola},pngnpbx-abc-tts,${EXTEN}!${abcid}!${yp},);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    ainfo => {
        Set(ainfoX=${DB(pngnpbx/abc/cb/${abcid}/dloc/ainfo)});
        if( ${LEN(${ainfoX})} == 0 ) {
            Set(ainfoX=UNKNOWN);
        }
        &pngnpbx-abc-clu(Added-Info,${ainfoX});
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    cbnum => {
        Set(cbnumX=${DB(pngnpbx/abc/cb/${abcid}/outboundcidnum)});
        if( ${LEN(${cbnumX})} == 0 ) {
            Set(cbnumX=UNKNOWN);
        }
        &pngnpbx-abc-clu(${cbnumX},OG Call Back Number);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    extnum => {
        &pngnpbx-abc-clu(${abcid},OG Caller Extension);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    poo => {
        &pngnpbx-abc-clu(poo,Point Of Order!);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    dtmf => {
        &pngnpbx-abc-clu(nextdigit,Sending DTMF);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    yes => {
        &pngnpbx-abc-clu(yes,Sending YES);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    usercount => {
        Set(cb=pngnpbx-abc-${yp}-${abcid});
        Set(cbpc=${CONFBRIDGE_INFO(parties,${cb})});
        &pngnpbx-abc-clu(${cbpc},ConfCall User Count);
        goto pngnpbx-abc-ciao,${EXTEN},1;
    }
    tones => goto pngnpbx-abc-ciao,${EXTEN},1;
    abc => goto pngnpbx-abc-ciao,${EXTEN},1;
}

/* Must exit "hola" via "ciao" otherwise it will loop. */
context pngnpbx-abc-ciao {
    _[a-z]. => &pngnpbx-abc-originate(${pvthola},pngnpbx-abc-tts,${EXTEN}!${abcid}!${yp},);
}

/* Anchor point for the "hola" shouts into either conference - yurt or palace. */
context pngnpbx-abc-hola-anchor {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        Set(p3=${CUT(sEXTEN,!,3)});
        Set(sub=${p1});
        &pngnpbx-abc-account(${p2});
        Set(yp=${p3});
        Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid}/conftimeout)});
        &pngnpbx-abc-cbo(${abcid},yurt); // TODO: do not give robot any options
        ConfBridge(pngnpbx-abc-${yp}-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Hangup();
    }
}

/* Pager calls need auto-answer. */
context pngnpbx-abc-aapager {
    s => {
        Set(PJSIP_HEADER(add,Alert-Info)=Ring Answer);
        Set(PJSIP_HEADER(add,Call-Info)=<uri>\;answer-after=0);
        Set(PJSIP_MEDIA_OFFER(audio)=!all,ulaw);
        Set(rfpager=${CHANNEL(audioreadformat)});
        Set(wfpager=${CHANNEL(audiowriteformat)});
        Return();
    }
}

/* Yurts have Corners where Friends can hang out separately but together. */
context pngnpbx-abc-wfh-corner-bridge {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        &pngnpbx-abc-account(${p1});
        Set(yurtcorner=${p2});
        Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid}/conftimeout)});
        &pngnpbx-abc-cbo-wfh-user(${cnftmt});
        &pngnpbx-abc-cbo-wfh-menu-user(${abcid},yurt);
        &pngnpbx-abc-cbo-wfh-corner();
        ConfBridge(pngnpbx-abc-yurt-${abcid}-corner-${yurtcorner});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        // Upon exiting the corner of the Yurt,
        // automatically move back into the center of the Yurt again.
        &pngnpbx-abc-cbo-wfh-user(${cnftmt});
        &pngnpbx-abc-cbo-wfh-menu-user(${abcid},yurt);
        ConfBridge(pngnpbx-abc-yurt-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Playback(goodbye);
        Hangup();
    }
}
/* Can't join corner directly from ConfBridge dialplan_exec
   so instead "wfh-corner-join" Originates a call to manipulate
   the channel we want to move from outside of dialplan_exec. */
context pngnpbx-abc-wfh-corner-join {
    _X => {
        Set(pvtcrnr=Local/${abcid}-${EXTEN}@pngnpbx-abc-wfh-corner-helper);
        // TODO: does this abstraction still work because of the comma in the b opt ??
        &pngnpbx-abc-originate(${pvtcrnr},pngnpbx-abc-wfh-corner-helper,hstd,b(hsub,1(${CHANNEL(name)})));
        // ...or does it need the old method...
        //Originate(${pvtcrnr},exten,pngnpbx-abc-wfh-corner-helper,hstd,1,1,ab(pngnpbx-abc-wfh-corner-helper,hsub,1(${CHANNEL(name)})));
    }
}
/* "wfh-corner-helper" handles the Originate from "wfh-corner-join"
   including a Gosub when the outgoing channel is started to stash the
   channel name that we want to redirect. */
context pngnpbx-abc-wfh-corner-helper {
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        ChannelRedirect(${channel_to_xfer},pngnpbx-abc-wfh-corner-bridge,${sEXTEN},1);
    }
    hstd => {
        Answer();
        NoOp(fake leg);
    }
    hsub => {
        Set(channel_to_xfer=${ARG1});
        Return();
    }
}
/* Move everyone from their corners back into the center of the Yurt. */
context pngnpbx-abc-wfh-corner-recenter {
    s => {
        Set(allchans=${CHANNELS()});
        for( j=1; ${j} <= ${FIELDQTY(allchans, )}; j=${j} + 1 ) {
            Set(c=${CUT(allchans, ,${j})});
            Set(frndacc=${IMPORT(${c},abc_is_accepted)});
            Set(frndabcid=${IMPORT(${c},abcid)});
            if( ${frndacc} ) {
                ChannelRedirect(${c},pngnpbx-abc-wfh-center-bridge,${frndabcid},1);
            }
        }
    }
}
/* This is only redirected to from "wfh-corner-recenter".
   Normally channels enter the (same) bridge in a different context. */
context pngnpbx-abc-wfh-center-bridge {
    _[0-9a-zA-Z]. => {
        DumpChan(5);
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid}/conftimeout)});
        &pngnpbx-abc-cbo-wfh-user(${cnftmt});
        &pngnpbx-abc-cbo-wfh-menu-user(${abcid},yurt);
        ConfBridge(pngnpbx-abc-yurt-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Playback(goodbye);
        Hangup();
    }
}
/* Remove users from Corners and Center of the Yurt. */
macro pngnpbx-abc-wfh-empty-yurt-sub() {
    Set(allchans=${CHANNELS()});
    for( j=1; ${j} <= ${FIELDQTY(allchans, )}; j=${j} + 1 ) {
        Set(c=${CUT(allchans, ,${j})});
        Set(frndacc=${IMPORT(${c},abc_is_accepted)});
        Set(frndabcid=${IMPORT(${c},abcid)});
        if( ${frndacc} ) {
            ChannelRedirect(${c},pngnpbx-abc-wfh-empty-yurt-sub,~~s~~,bye);
        }
    }
    Return();
bye:
    Playback(conf-leaderhasleft&goodbye);
    Hangup();
    return;
}

/* The "bridge" context puts spooled calls in the conference. */
context pngnpbx-abc-bridge {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-cbo(${abcid},yurt);
        &pngnpbx-abc-video();
        ConfBridge(pngnpbx-abc-yurt-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Hangup();
    }
}

/* The "trolling" context also puts spooled calls in the conference.
 * BUT it mutes them. */
context pngnpbx-abc-trolling {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-cbo-troll(${abcid},yurt);
        &pngnpbx-abc-video();
        ConfBridge(pngnpbx-abc-yurt-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Hangup();
    }
}

/* The "palace" context is for Paladins only.
 * It is separate from the "yurt" conference for OG caller, Remote End
 * and any Friends/Trolls. BUT, it can listen in on that conference. */
// TODO: sometimes the Yurt audio sounds really bad in the Palace
context pngnpbx-abc-palace {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-cbo(${abcid},palace);
        &pngnpbx-abc-video();
        ConfBridge(pngnpbx-abc-palace-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Hangup();
    }
}

/* The "vmdata" context plays some filler audio into voicemail.
 * It is paired with "vmdrop" when no actual call audio is desired
 * in the voicemail message. */
context pngnpbx-abc-vmdata {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        Set(abcdnid=${DB(pngnpbx/abc/cb/${abcid}/dnid)});
        Set(abccidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Set(abcshorty=${DB(pngnpbx/abc/cb/${abcid}/shorty)});
        SayAlpha(${abcdnid});
        Playback(call&from);
        SayAlpha(${abcshorty});
        //Playback(is);
        //SayAlpha(${abccidnum});
        // hmmmm. is this too long...
        //Playback(approximately);
        //SayUnixTime();
        Hangup();
    }
}

/* The "pgdata" context plays some filler audio into the page.
 * It is paired with "pgdrop" when no actual call audio is desired
 * in the page. */
context pngnpbx-abc-pgdata {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        Set(abcdnid=${DB(pngnpbx/abc/cb/${abcid}/dnid)});
        Set(abccidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Set(abcshorty=${DB(pngnpbx/abc/cb/${abcid}/shorty)});
        Wait(.5);
        &pngnpbx-abc-tones();
        &pngnpbx-abc-tones();
        &pngnpbx-abc-tones();
        Playback(emergency);
        SayAlpha(${abcdnid});
        Playback(call&from);
        SayAlpha(${abcshorty});
        Wait(2);
        &pngnpbx-abc-tones();
        &pngnpbx-abc-tones();
        Playback(emergency);
        SayAlpha(${abcdnid});
        Playback(call&from);
        SayAlpha(${abcshorty});
        Wait(3);
        &pngnpbx-abc-tones();
        Playback(emergency);
        SayAlpha(${abcdnid});
        Playback(call&from);
        SayAlpha(${abcshorty});
        Wait(1);
        Playback(goodbye);
        Hangup();
    }
}

/* The "vmdrop" context saves snippet of call into voicemail. */
context pngnpbx-abc-vmdrop {
    _[0-9a-zA-Z].!X.!X. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${CUT(EXTEN,!,1)})});
        Set(tmo=${CUT(EXTEN,!,2)});
        Set(grp=${CUT(EXTEN,!,3)});
        Set(TIMEOUT(absolute)=${tmo});
        Set(boxes=${DB(pngnpbx/abc/cb/${abcid}/vmailboxes/${grp})});
        Set(outboundcidnum=${DB(pngnpbx/abc/cb/${abcid}/outboundcidnum)});
        Set(abccidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Set(abccidname=${DB(pngnpbx/abc/cb/${abcid}/cidname)});
        Set(abcdnid=${DB(pngnpbx/abc/cb/${abcid}/dnid)});
        Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid}/conftimeout)});
        Set(plc=${DB(pngnpbx/abc/cb/${abcid}/gps/plc)});
        Set(lat=${DB(pngnpbx/abc/cb/${abcid}/gps/lat)});
        Set(lng=${DB(pngnpbx/abc/cb/${abcid}/gps/lng)});
        Set(elv=${DB(pngnpbx/abc/cb/${abcid}/gps/elv)});
        Set(uni=${DB(pngnpbx/abc/cb/${abcid}/gps/uni)});
        Set(CALLERID(num)=${abccidnum});
        Set(newcidname=${TOUPPER(${abcshorty})}:);
        Set(newcidname=${newcidname} ${abccidname} ${abccidnum} dialed ${abcdnid});
        DumpChan(5);
        if( ${LEN(${outboundcidnum})} > 0 ) {
            Set(newcidname=${newcidname} as ${outboundcidnum});
        }
        if( ${LEN(${plc})} > 0 ) {
            Set(newcidname=${newcidname} location PLUSCODE=${plc});
        } else if( ${LEN(${lat})} > 0 || ${LEN(${lng})} > 0 ) {
            Set(newcidname=${newcidname} location GPS LAT=${lat} LNG=${lng});
        } else {
            NoOp(no location info stored that is a bummer);
        }
        if( ${LEN(${elv})} > 0 || ${LEN(${uni})} > 0 ) {
            Set(newcidname=${newcidname} Z-AXIS=${uni} ${elv});
        }
        Set(CALLERID(name)=${newcidname});
        // TODO: double-check if voicemail entry exists
        VoiceMail(${boxes},sUP);
        Hangup();
    }
}

/* The "pgdrop" context plays snippet of call to phones over Page app. */
context pngnpbx-abc-pgdrop {
    _[0-9a-zA-Z].!X.!X. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${CUT(EXTEN,!,1)})});
        Set(tmo=${CUT(EXTEN,!,2)});
        Set(grp=${CUT(EXTEN,!,3)});
        Set(TIMEOUT(absolute)=${tmo});
        Set(phones=${DB(pngnpbx/abc/cb/${abcid}/pagephones/${grp})});
        Set(outboundcidnum=${DB(pngnpbx/abc/cb/${abcid}/outboundcidnum)});
        Set(abccidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Set(abccidname=${DB(pngnpbx/abc/cb/${abcid}/cidname)});
        Set(abcdnid=${DB(pngnpbx/abc/cb/${abcid}/dnid)});
        Set(cnftmt=${DB(pngnpbx/abc/cb/${abcid}/conftimeout)});
        Set(plc=${DB(pngnpbx/abc/cb/${abcid}/gps/plc)});
        Set(lat=${DB(pngnpbx/abc/cb/${abcid}/gps/lat)});
        Set(lng=${DB(pngnpbx/abc/cb/${abcid}/gps/lng)});
        Set(elv=${DB(pngnpbx/abc/cb/${abcid}/gps/elv)});
        Set(uni=${DB(pngnpbx/abc/cb/${abcid}/gps/uni)});
        Set(CALLERID(num)=${abccidnum});
        Set(newcidname=${TOUPPER(${abcshorty})}:);
        Set(newcidname=${newcidname} ${abccidname} ${abccidnum} dialed ${abcdnid});
        DumpChan(5);
        if( ${LEN(${outboundcidnum})} > 0 ) {
            Set(newcidname=${newcidname} as ${outboundcidnum});
        }
        if( ${LEN(${plc})} > 0 ) {
            Set(newcidname=${newcidname} location PLUSCODE=${plc});
        } else if( ${LEN(${lat})} > 0 || ${LEN(${lng})} > 0 ) {
            Set(newcidname=${newcidname} location GPS LAT=${lat} LNG=${lng});
        } else {
            NoOp(no location info stored that is a bummer);
        }
        if( ${LEN(${elv})} > 0 || ${LEN(${uni})} > 0 ) {
            Set(newcidname=${newcidname} Z-AXIS=${uni} ${elv});
        }
        Set(CALLERID(name)=${newcidname});
        // TODO: double-check if phones exist
        Page(${phones},isb(pngnpbx-abc-aapager^s^1),5);
        Hangup();
    }
}

/* The "redial" context is entered from conf sub-menu via option (if any) to
 * re-attempt the outbound remote call, as it was dialed by the OG caller.
 * NOT CURRENTLY USED. */
context pngnpbx-abc-redial {
    _[0-9a-zA-Z]. => {
        Answer();
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        Hangup();
        Set(pvt=Local/${abcid}@pngnpbx-abc-bridge);
        &pngnpbx-abc-originate(${pvt},pngnpbx-abc-dial,${abcid}!0ABC,);
        Hangup();
    }
}

/* The "wfh-redial" context is for the OG to try Friends again in WFH mode. */
context pngnpbx-abc-wfh-redial {
    _[0-9a-zA-Z].![0-9] => {
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${CUT(EXTEN,!,1)})});
        Set(scnf=${CUT(EXTEN,!,2)});
        Set(imdbk=pngnpbx/abc/insta/${abcid}/yurt/${scnf});
        Set(lastdial=${DB(${imdbk}/lastdial)});
        if( ${MATH(${EPOCH}-${lastdial},int)} < 120 ) {
            Playback(sorry-cant-let-you-do-that&your&digits/2&fast&wait-moment&digits/2&minutes);
        } else {
            goto s,1;
        }
    }
    s => {
        Set(redialcnt=0);
        for( i=1; ${i} <= 9; i=${i} + 1 ) {
            Set(frndtel=${DB(${imdbk}/friend/${i})});
            if( ${LEN(${frndtel})} == 0 ) {
                NoOp();
            } else {
                Set(frndialstr=PJSIP/${frndtel});
                // Assume anything less than six digits/letters is not
                // reachable via MYTRUNK calls
                if( ${LEN(${frndtel})} < 7 ) {
                    &pngnpbx-abc-demo-friend-map(${frndtel});
                } else {
                    if( ${LEN(${frndtel})} == 10 ) {
                        // TODO: this is provider and location specific
                        Set(frndtel=1${frndtel});
                    }
                    // TODO: replace "MYTRUNK" trunk name to make dialing generic
                    // (maybe as context you define elsewhere eg. extensions.conf)
                    // also make it not require PJSIP so much...
                    Set(frndialstr=PJSIP/${frndtel}@MYTRUNK);
                }
                Set(frndystr=${CUT(frndialstr,/,2)});
                Set(frndytel=${CUT(frndystr,@,1)});
                // TODO: probably should spin through a smaller list
                Set(allchans=${CHANNELS()});
                Set(needsredial=1);
                for( j=1; ${j} <= ${FIELDQTY(allchans, )}; j=${j} + 1 ) {
                    Set(c=${CUT(allchans, ,${j})});
                    Set(frndxacc=${IMPORT(${c},abc_is_accepted)});
                    Set(frndxdpn=${IMPORT(${c},DIALEDPEERNUMBER)});
                    Set(frndxtel=${CUT(frndxdpn,@,1)});
                    if( "x${frndxtel}" == "x${frndytel}" ) {
                        if( ${frndxacc} ) {
                            Set(needsredial=0);
                        }
                        break;
                    }
                }
                if( ${needsredial} ) {
                    Set(redialcnt=${INC(redialcnt)});
                    &pngnpbx-abc-friend(${i},${frndialstr});
                }
            }
        }
        if( ${redialcnt} == 0 ) {
            Playback(sorry-cant-let-you-do-that2&no-empty-conferences);
        } else {
            Set(DB(${imdbk}/lastdial)=${EPOCH});
            Playback(no_worries_try_again);
            SayNumber(${redialcnt});
            Playback(users);
        }
    }
}

/* The "answered-" contexts are for after the dial picks up
 * on the Remote End. */
context pngnpbx-abc-answered-common {
    _[0-9a-zA-Z]. => {
        Answer(); // caller enters
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})}); // callee enters
        Set(doannounce=${DB(pngnpbx/abc/cb/${abcid}/announce)});
        Set(doprompted=${DB(pngnpbx/abc/cb/${abcid}/prompted)});
        if( "x${doannounce}" == "xyes" ) {
            // automatic announcement of GPS data upon Remote End answer
            Set(pvthola=Local/gps!${abcid}!yurt@pngnpbx-abc-hola-anchor);
            &pngnpbx-abc-originate(${pvthola},pngnpbx-abc-tts,gps!${abcid}!yurt,);
        } else if( "x${doprompted}" == "xyes" ) {
            Wait(.1);
            &pngnpbx-abc-tones();
            Set(robo=silence/1);
            if( ${DB_EXISTS(pngnpbx/abc/cb/${abcid}/robo)} ) {
                Set(robo=${DB_RESULT});
            }
            Read(abc_is_accepted,${robo}&to-join-a-meeting&press-1&now,1,,3,3);
            if( "x${abc_is_accepted}" != "x1" ) {
                Playback(goodbye);
                Hangup();
            }
            DumpChan(5);
        }
        &pngnpbx-abc-cbo(${abcid},yurt);
        &pngnpbx-abc-video();
        if( "x${DB(pngnpbx/abc/cb/${abcid}/teams)}" == "xyes" ) {
            Set(PHID=${PERIODIC_HOOK(pngnpbx-abc-phooks,friend!${abcid},60)});
            Set(PERIODIC_HOOK(${PHID})=on);
        }
        ConfBridge(pngnpbx-abc-yurt-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Playback(goodbye);
        Hangup();
    }
}

/* The "answered-originate" context should *not* be used in Tin Can Mode.
 * It should be entered only from a Dial option 'G' which is why it looks weird.
 * Do not be fooled by the Hangup in the first line when Originating.
 * KEEP IT THERE. */
context pngnpbx-abc-answered-originate {
    _[0-9a-zA-Z]. => {
        Hangup(); // caller enters here but their leg not needed with Originate
        NoOp(); // where the callee enters
        &pngnpbx-abc-account(${FILTER(0-9a-zA-Z,${EXTEN})});
        Set(DB(pngnpbx/abc/cb/${abcid}/remotechan)=${CHANNEL(name)});
        goto pngnpbx-abc-answered-common,${EXTEN},1;
    }
}

/* The "answered-tincan" context should only be used when in Tin Can Mode.
 * It should be entered only from a Dial option 'G' which is why it looks weird.
 * Do not be fooled by the goto in the first line when Dialing.
 * KEEP IT THERE. */
context pngnpbx-abc-answered-tincan {
    _[0-9a-zA-Z]. => {
        goto pngnpbx-abc-answered-common,${EXTEN},1;            // caller enters
        Answer();                                               // callee enters
        Set(sEXTEN=${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-account(${sEXTEN});                        // set numbers
        Set(DB(pngnpbx/abc/cb/${abcid}/remotechan)=${CHANNEL(name)});
        Set(spychan=${DB(pngnpbx/abc/cb/${abcid}/spychan)});    // find the spy
        ChannelRedirect(${spychan},${CONTEXT},h,1);             // kill the spy
        goto pngnpbx-abc-answered-common,${sEXTEN},1;           // go to conf
    }
    h => Hangup();                                              // spy cemetery
}

/* The "answered-friend" context is executed when the friend answers the call.
 * Friends are only ever called with Originate.
 * Do not be fooled by the Hangup in the first line when Originating.
 * KEEP IT THERE. */
context pngnpbx-abc-answered-friend {
    _[0-9a-zA-Z]. => {
        Hangup(); // caller enters here but their leg not needed with Originate
        Answer(); // where the callee enters
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        &pngnpbx-abc-tones();
        goto pngnpbx-abc-answered-common,${sEXTEN},1;
    }
}

/* The "answered-troll" context is executed when the troll answers the call.
 * Trolls are only ever called with Originate.
 * Do not be fooled by the Hangup in the first line when Originating.
 * KEEP IT THERE. */
context pngnpbx-abc-answered-troll {
    _[0-9a-zA-Z]. => {
        Hangup(); // caller enters here but their leg not needed with Originate
        Answer(); // where the callee enters
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        &pngnpbx-abc-account(${p1});
        Set(position=${FILTER(0-9,${p2})});
        &pngnpbx-abc-tones();
        &pngnpbx-abc-cbo-troll(${abcid},yurt);
        Set(cidnum=${DB(pngnpbx/abc/cb/${abcid}/cidnum)});
        Set(dnid=${DB(pngnpbx/abc/cb/${abcid}/dnid)});
        Set(nosy=${DB(pngnpbx/abc/cb/${abcid}/troll/${position}/nosy)});
        SayAlpha(${dnid});
        Playback(call&from);
        SayAlpha(${cidnum});
        if( "x${nosy}" == "xnosy" ) {
            &pngnpbx-abc-video();
            ConfBridge(pngnpbx-abc-yurt-${abcid});
            NoOp(cbr=${CONFBRIDGE_RESULT});
        }
        Hangup();
    }
}

/* The "answered-paladin" context is executed when the paladin answers the call.
 * Paladins are only ever called with Originate.
 * Do not be fooled by the Hangup in the first line when Originating.
 * KEEP IT THERE. */
context pngnpbx-abc-answered-paladin {
    _[0-9a-zA-Z]. => {
        Hangup(); // caller enters here but their leg not needed with Originate
        Answer(); // where the callee enters
        Set(sEXTEN=${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-account(${sEXTEN});
        &pngnpbx-abc-tones();
        &pngnpbx-abc-cbo(${abcid},palace);
        &pngnpbx-abc-video();
        ConfBridge(pngnpbx-abc-palace-${abcid});
        NoOp(cbr=${CONFBRIDGE_RESULT});
        Hangup();
    }
}

/* The "afterword-tincan" context is the place to send the remote caller to
 * when the caller hangs up *before* the Remote End answers. */
context pngnpbx-abc-afterword-tincan {
    _[0-9a-zA-Z]. => {
        // TODO: Hold the call up better!
        NoOp();
    }
}

/* The "spy-barge" context should only be used in Tin Can mode. */
context pngnpbx-abc-spy-barge {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-account(${sEXTEN});
        Set(chan=${DB(pngnpbx/abc/cb/${abcid}/ogchan)});
        Set(DB(pngnpbx/abc/cb/${abcid}/spychan)=${CHANNEL(name)});
        ChanSpy(${chan},BEqsSu);
        Hangup();
    }
}

/* The "spy-listen" context should only be used with Paladins and Palaces. */
context pngnpbx-abc-spy-listen {
    _[0-9a-zA-Z]. => {
        Answer();
        Set(sEXTEN=${FILTER(0-9a-zA-Z,${EXTEN})});
        &pngnpbx-abc-account(${sEXTEN});
        Set(chan=${DB(pngnpbx/abc/cb/${abcid}/ogchan)});
        if( ${DB_EXISTS(pngnpbx/abc/cb/${abcid}/spychanpalace)} ) {
            NoOp(Palace is already listening to the Yurt.);
        } else {
            Set(DB(pngnpbx/abc/cb/${abcid}/spychanpalace)=${CHANNEL(name)});
            ChanSpy(${chan},EqsSu);
        }
        Hangup();
    }
}

/* The "test" context "service" priority is for load testing with SIPp.
 * At a shell prompt, run something like:
 *     sipp -sn uac 127.0.0.1:5060 -p 5068 -d 3000 -r 40 -m 40
 */
context pngnpbx-abc-test {
    service => {
        Answer();
        Wait(2);
    }
}

/* Hooks to run on each channel periodically.
 * This happens on a new channel each time.
 * Only used in Insta + Teams Mode */
context pngnpbx-abc-phooks {
    theog => {
        DumpChan(5);
        Wait(.1);
        Set(pngnpbx_abc_id=${IMPORT(${HOOK_CHANNEL},pngnpbx_abc_id)});
        &pngnpbx-abc-teamcalc(${pngnpbx_abc_id},-1);
        Set(currml=${GOSUB_RETVAL});
        if( ${currml} <= 10 ) {
            Answer();
            Wait(.2);
            if( ${currml} > -10 ) {
                Playback(beep&near&digits/0&minutes&in-the&conference);
            } else {
                Set(PERIODIC_HOOK(${HOOK_ID})=off);
                Playback(confbridge-leave&conference&terminated&digits/0&minutes);
                ChannelRedirect(${HOOK_CHANNEL},pngnpbx-abc-itm-accounting,s,1);
            }
        }
    }
    _friend[!][0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        DumpChan(5);
        Wait(.1);
        &pngnpbx-abc-account(${p2});
        &pngnpbx-abc-teamcalc(${abcid},-1);
        Set(currml=${GOSUB_RETVAL});
        if( ${currml} <= 10 ) {
            Answer();
            Wait(.2);
            Playback(beep);
        }
    }
}

/* The "dial-friend" context wraps around "dial" context. */
context pngnpbx-abc-dial-friend {
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(tofriend=yes);
        goto pngnpbx-abc-dial,${sEXTEN},1;
    }
}

/* The "dial-troll" context wraps around "dial" context. */
context pngnpbx-abc-dial-troll {
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(totroll=yes);
        goto pngnpbx-abc-dial,${sEXTEN},1;
    }
}

/* The "dial-paladin" context wraps around "dial" context. */
context pngnpbx-abc-dial-paladin {
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(topaladin=yes);
        goto pngnpbx-abc-dial,${sEXTEN},1;
    }
}

/* The "dial" context actually makes the phones ring.
 * This includes both local phones like Friends, Paladins and Trolls.
 * As well as remote phones like the far end. */
context pngnpbx-abc-dial {
    _[0-9a-zA-Z]. => {
        Set(sEXTEN=${FILTER(0-9a-zA-Z!,${EXTEN})});
        Set(p1=${CUT(sEXTEN,!,1)});
        Set(p2=${CUT(sEXTEN,!,2)});
        &pngnpbx-abc-account(${p1});
        Set(position=${FILTER(0-9,${p2})});
        Set(dbk=pngnpbx/abc/cb/${abcid});

        if( "x${tofriend}" == "xyes" ) {
            Set(tofriend=${DB(${dbk}/friend/${position}/dialstr)});
        } else if( "x${totroll}" == "xyes" ) {
            Set(totroll=${DB(${dbk}/troll/${position}/dialstr)});
            Set(nosy=${DB(${dbk}/troll/${position}/nosy)});
        } else if( "x${topaladin}" == "xyes" ) {
            Set(topaladin=${DB(${dbk}/paladin/${position}/dialstr)});
        }

        Set(usetincan=${DB(${dbk}/tincan)});
        Set(outboundcidnum=${DB(${dbk}/outboundcidnum)});
        Set(abcshorty=${DB(${dbk}/shorty)});
        Set(abccidnum=${DB(${dbk}/cidnum)});
        Set(abccidname=${DB(${dbk}/cidname)});
        Set(abcdnid=${DB(${dbk}/dnid)});
        Set(cnftmt=${DB(${dbk}/conftimeout)});
        Set(plc=${DB(${dbk}/gps/plc)});
        Set(lat=${DB(${dbk}/gps/lat)});
        Set(lng=${DB(${dbk}/gps/lng)});
        Set(elv=${DB(${dbk}/gps/elv)});
        Set(uni=${DB(${dbk}/gps/uni)});
        Set(isteams=${DB(${dbk}/teams)});

        Set(CHANNEL(accountcode)=${abcshorty});
        Set(TIMEOUT(absolute)=${cnftmt});
        Set(abcdialo=iI); // no forwards or connected line updates

        if( "x${isteams}" == "xyes" ) {
            Set(CALLERID(name)=${outboundcidnum});
            Set(CALLERID(num)=${outboundcidnum});
            if( ${LEN(${tofriend})} > 0 ) {
                Set(abcdialo=${abcdialo}r(silent));
                Set(abcdialo=${abcdialo}G(pngnpbx-abc-answered-friend^${abcid}^1));
                // Try to dial out a couple of times, one minute each try...
                Dial(${tofriend},60,${abcdialo});
                if( "x${DIALSTATUS}" != "xANSWERED" ) {
                    Wait(2);
                    Dial(${tofriend},60,${abcdialo});
                }
            }

        } else if( ${LEN(${tofriend})} > 0
         || ${LEN(${topaladin})} > 0
         || ${LEN(${totroll})} > 0 ) {

            // Looks like we are dialing locally.

            Answer();

            Set(CALLERID(num)=${abccidnum});
            Set(newcidname=${TOUPPER(${abcshorty})}:);
            Set(newcidname=${newcidname} ${abccidname} dialed ${abcdnid});
            if( ${LEN(${outboundcidnum})} > 0 ) {
                Set(newcidname=${newcidname} as ${outboundcidnum});
            }
            if( ${LEN(${plc})} > 0 ) {
                Set(newcidname=${newcidname} location PLUSCODE=${plc});
            } else if( ${LEN(${lat})} > 0 || ${LEN(${lng})} > 0 ) {
                Set(newcidname=${newcidname} location GPS LAT=${lat} LNG=${lng});
            } else {
                NoOp(no location info stored that is a bummer);
            }
            if( ${LEN(${elv})} > 0 || ${LEN(${uni})} > 0 ) {
                Set(newcidname=${newcidname} Z-AXIS=${uni} ${elv});
            }
            Set(CALLERID(name)=${newcidname});
            // The silent ringer should be defined in indications.conf.
            // See more info at the top of this file.
            Set(abcdialo=${abcdialo}r(silent));
            if( ${LEN(${tofriend})} > 0 ) {
                Set(abcdialo=${abcdialo}G(pngnpbx-abc-answered-friend^${abcid}^1));
            } else if( ${LEN(${totroll})} > 0 ) {
                Set(optb=b(pngnpbx-abc-alerthdrs^~~s~~^1));
                Set(optG=G(pngnpbx-abc-answered-troll^${abcid}!${position}^1));
                Set(abcdialo=${abcdialo}${optb}${optG});
            } else {
                Set(abcdialo=${abcdialo}G(pngnpbx-abc-answered-paladin^${abcid}^1));
            }

            // Try to dial out a couple of times, one minute each try...
            Dial(${tofriend}${totroll}${topaladin},60,${abcdialo});

            if( "${DIALSTATUS}" != "ANSWERED" ) {
                Wait(2);
                Dial(${tofriend}${totroll}${topaladin},60,${abcdialo});
            }

        } else {

            // Looks like we are dialing remotely...

            Set(CALLERID(num)=${outboundcidnum});

            if( ${LEN(${plc})} > 0 ) {
                // Really cool if/when the provider lets this get
                // to the Remote End (some do!) because it always fits.
                Set(newcidname=GPS ${plc});
            } else {
                if( ${LEN(${lat})} > 0 && ${LEN(${lng})} > 0 ) {
                    // TODO: consider alternate CALLERID(name) formats
                    // Example: "123 4567 123456" (123.4567 lng 12.3456 lat)
                    // because it exceeds 15 char limit
                    Set(newcidname=GPS ${lat} ${lng});
                } else {
                    Set(newcidname=${abccidname});
                }
            }

            if( ${LEN(${plc}${lat}${lng})} > 0 ) {
                Set(newcidname=${newcidname} ${elv}${uni});
                Set(newcidname=${newcidname}:${abccidname});
                // No biggee if no URL at least we modded/overloaded
                // the caller ID name.
                Set(gpsurl=${DB(pngnpbx/abc/cb/${abcid}/gps/url)});
                if( ${LEN(${gpsurl})} > 0 ) {
                    // Macros in AEL are Gosubs with snake-like extension names.
                    // (Maybe pronounced 'sssssss'.)
                    Set(optb=b(pngnpbx-abc-geohdrs^~~s~~^1(${abcid})));
                    // TODO: Adjust Contact header for setting name
                    //       and call back number (on some providers.)
                    Set(abcdialo=${abcdialo}${optb});
                }
            }

            Set(CALLERID(name)=${newcidname});

            if( "x${usetincan}" == "xyes" ) {
                // TODO: get audio flowing in Tin Can mode before Remote End
                //       answers the call - but it depends on the phone -
                //       because if you can send & receive audio before answer -
                //       then that does seem kind of silly
                //Proceeding();
                //Progress();
                Set(optF=F(pngnpbx-abc-afterword-tincan^${abcid}^1));
                Set(optG=G(pngnpbx-abc-answered-tincan^${abcid}^1));
                Set(abcdialo=${abcdialo}${optF}${optG});
            } else {
                // Yes, THE ANSWER, Simple Mode, let everybody talk ASAP!
                Answer();
                Set(optG=G(pngnpbx-abc-answered-originate^${abcid}^1));
                Set(abcdialo=${abcdialo}${optG});
            }

            Set(dbcb=pngnpbx/abc/cb);
            //Progress();
            for( i=1; ${i} <= 3; i=${i} + 1 ) {
                Set(opdialstr=${DB(${dbcb}/${abcid}/outpath/${i}/dialstr)});
                Set(optimeout=${DB(${dbcb}/${abcid}/outpath/${i}/timeout)});
                if( ${LEN(${opdialstr})} == 0 ) {
                    break;
                }
                if( ${LEN(${optimeout})} == 0 ) {
                    Set(optimeout=300);
                }
                // hooray a Dial
                Dial(${opdialstr},${optimeout},${abcdialo});
                if( "${DIALSTATUS}" == "ANSWERED" ) {
                    break;
                }
                // wait a couple of seconds on any retries
                Wait(1);
                Proceeding();
                Wait(1);
            }
        }
    }
}; // end context pngnpbx-abc-dial


/*

FOOTNOTES
=========

Always Be Conferencing is standing on the shoulders of giants --
it is just one configuration file that does nothing on its own.

Thank you to all of the helpful contributors and developers on
the ASTERISK and FreePBX projects, mailing lists and web forums.

ASTERISK, FreePBX and DAHDI are registered trademarks of Sangoma.

Penguin PBX Solutions is not affiliated with Sangoma, but wishes the staff there
-- and at Clearly IP -- all of the best. Gracias Ustedes y Amigos!

*/
